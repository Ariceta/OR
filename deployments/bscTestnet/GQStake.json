{
  "address": "0x70C6B13A1A966B00fe79E697180099ca776f5E5D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolLimitPerUser",
          "type": "uint256"
        }
      ],
      "name": "NewPoolLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR_STAKED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyRewardWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasDepositMin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasUserLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolLimitPerUser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDeposit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCalcRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLimitPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTxAmount",
          "type": "uint256"
        }
      ],
      "name": "poolSetRewardMaxTxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "name": "poolSetStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetStartAndDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "poolStartIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMaxTxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlockUI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasUserLimit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_poolLimitPerUser",
          "type": "uint256"
        }
      ],
      "name": "updatePoolLimitPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRemains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd228dc3ee049bfab72f4860af12920690208b9cc32a06743a24430cd3c537810",
  "receipt": {
    "to": null,
    "from": "0x2aBcbdF5a10082F311D666EC58aD1C90948a2F4a",
    "contractAddress": "0x70C6B13A1A966B00fe79E697180099ca776f5E5D",
    "transactionIndex": 4,
    "gasUsed": "1852018",
    "logsBloom": "0x
    "blockHash": "0xe126c20c1e7e35f91fa9a7c02088122c0ede4470da1205b733752c3ae368b94c",
    "transactionHash": "0xd228dc3ee049bfab72f4860af12920690208b9cc32a06743a24430cd3c537810",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 19759359,
        "transactionHash": "0xd228dc3ee049bfab72f4860af12920690208b9cc32a06743a24430cd3c537810",
        "address": "0x70C6B13A1A966B00fe79E697180099ca776f5E5D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002abcbdf5a10082f311d666ec58ad1c90948a2f4a"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xe126c20c1e7e35f91fa9a7c02088122c0ede4470da1205b733752c3ae368b94c"
      }
    ],
    "blockNumber": 19759359,
    "cumulativeGasUsed": "2388524",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19d08bcb728ec8ac548e320f2f04b30a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR_STAKED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDepositMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDeposit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCalcRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"poolSetRewardMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"poolSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetStartAndDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"poolStartIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMaxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinimumDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRemains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GQStake.sol\":\"GQStake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/GQStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract GQStake is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Whether a limit is set for users\\n    bool public hasUserLimit;\\n\\n    // Whether a limit is set for users\\n    bool public hasDepositMin;\\n\\n    // Minimum token deposit\\n    uint256 public minimumDeposit;\\n\\n    // Whether it is initialized\\n    bool public isInitialized;\\n\\n    // Accrued token per share\\n    uint256 public accTokenPerShare;\\n\\n    // The block number when REWARD distribution ends.\\n    uint256 public endBlock;\\n\\n    // The block number when REWARD distribution starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastUpdateBlock;\\n\\n    // The pool limit (0 if none)\\n    uint256 public poolLimitPerUser;\\n\\n    // REWARD tokens created per block.\\n    uint256 public rewardPerBlock;\\n\\n    // max amount allowed to be transferred, 0 = no limit\\n    uint256 public rewardMaxTxAmount = 0;\\n\\n    // decimals places of the reward token\\n    uint8 public rewardTokenDecimals;\\n\\n    // Total staked by users\\n    uint256 public totalStaked;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR_STAKED;\\n\\n    // The reward token\\n    IERC20 public rewardToken;\\n\\n    // The staked token\\n    IERC20 public stakedToken;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // How many staked tokens the user has provided\\n        uint256 rewardDebt; // Reward debt\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event NewPoolLimit(uint256 poolLimitPerUser);\\n    event RewardsStop(uint256 blockNumber);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /*\\n     * @notice Initialize the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _endBlock: end block\\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\n     * @param _admin: admin address with ownership\\n     */\\n    function initialize(\\n        IERC20 _stakedToken,\\n        IERC20 _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _poolLimitPerUser,\\n        uint256 _minimumDeposit\\n    ) external {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        isInitialized = true;\\n\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n\\n        if (_poolLimitPerUser > 0) {\\n            hasUserLimit = true;\\n            poolLimitPerUser = _poolLimitPerUser;\\n        }\\n\\n        if (_minimumDeposit > 0) {\\n            hasDepositMin = true;\\n            minimumDeposit = _minimumDeposit;\\n        }\\n\\n        rewardTokenDecimals = IERC20Metadata(address(rewardToken)).decimals();\\n        uint256 decimalsRewardToken = uint256(rewardTokenDecimals);\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\n\\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (hasUserLimit) {\\n            require(\\n                _amount.add(user.amount) <= poolLimitPerUser,\\n                \\\"User amount above limit\\\"\\n            );\\n        }\\n\\n        if (hasDepositMin) {\\n            require(\\n                _amount >= minimumDeposit,\\n                \\\"Deposit amount not reach the minimum\\\"\\n            );\\n        }\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                sendPending(pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakedToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            totalStaked = totalStaked.add(_amount);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n\\n        _updatePool();\\n\\n        uint256 pending = user\\n            .amount\\n            .mul(accTokenPerShare)\\n            .div(PRECISION_FACTOR)\\n            .sub(user.rewardDebt);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            stakedToken.safeTransfer(address(msg.sender), _amount);\\n            totalStaked = totalStaked.sub(_amount);\\n        }\\n\\n        if (pending > 0) {\\n            sendPending(pending);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Claim reward tokens\\n     */\\n    function claim() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n\\n            if (pending > 0) {\\n                sendPending(pending);\\n                emit Claim(msg.sender, pending);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n    }\\n\\n    /*\\n     * @notice SendPending tokens to claimer\\n     * @param pending: amount to claim\\n     */\\n    function sendPending(uint256 pending) internal {\\n        if (rewardMaxTxAmount == 0) {\\n            rewardToken.safeTransfer(address(msg.sender), pending);\\n        } else {\\n            while (pending > 0) {\\n                uint256 amount = pending > rewardMaxTxAmount\\n                    ? rewardMaxTxAmount\\n                    : pending;\\n                pending = pending.sub(amount);\\n                rewardToken.safeTransfer(address(msg.sender), amount);\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        if (amountToTransfer > 0) {\\n            stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\\n            totalStaked = totalStaked.sub(amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, user.amount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner. Needs to be for emergency.\\n     */\\n    //TODO: Review\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\n        rewardToken.safeTransfer(address(msg.sender), _amount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != address(rewardToken),\\n            \\\"Cannot be reward token\\\"\\n        );\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update pool limit per user\\n     * @dev Only callable by owner.\\n     * @param _hasUserLimit: whether the limit remains forced\\n     * @param _poolLimitPerUser: new pool limit per user\\n     */\\n    function updatePoolLimitPerUser(\\n        bool _hasUserLimit,\\n        uint256 _poolLimitPerUser\\n    ) external onlyOwner {\\n        require(hasUserLimit, \\\"Must be set\\\");\\n        if (_hasUserLimit) {\\n            require(\\n                _poolLimitPerUser > poolLimitPerUser,\\n                \\\"New limit must be higher\\\"\\n            );\\n            poolLimitPerUser = _poolLimitPerUser;\\n        } else {\\n            hasUserLimit = _hasUserLimit;\\n            poolLimitPerUser = 0;\\n        }\\n        emit NewPoolLimit(poolLimitPerUser);\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"New startBlock must be lower than new endBlock\\\"\\n        );\\n        require(\\n            block.number < _startBlock,\\n            \\\"New startBlock must be higher than current block\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        endBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 stakedTokenSupply = totalStaked;\\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n            uint256 tokenReward = multiplier.mul(rewardPerBlock);\\n            uint256 adjustedTokenPerShare = accTokenPerShare.add(\\n                tokenReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n            );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedTokenPerShare)\\n                    .div(PRECISION_FACTOR)\\n                    .sub(user.rewardDebt);\\n        } else {\\n            return\\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\\n                    user.rewardDebt\\n                );\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastUpdateBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = totalStaked;\\n        if (stakedTokenSupply == 0) {\\n            lastUpdateBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n        uint256 tokenReward = multiplier.mul(rewardPerBlock);\\n        accTokenPerShare = accTokenPerShare.add(\\n            tokenReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n        );\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     * @return multiplier\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= endBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock.sub(_from);\\n        }\\n    }\\n\\n    /*\\n     * @notice Sets the minimum amount to deposit\\n     * @param _minimumDeposit: Minimum amount to deposit\\n     * @dev This function is only callable by owner.\\n     */\\n    function setMinimumDeposit(uint256 _minimumDeposit) public onlyOwner {\\n        minimumDeposit = _minimumDeposit;\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool given a block amount\\n     * @param _blocks: block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolStartIn(uint256 _blocks) public onlyOwner {\\n        poolSetStart(block.number.add(_blocks));\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool\\n     * @param _startBlock: start block\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        uint256 rewardDurationValue = rewardDuration();\\n        startBlock = _startBlock;\\n        endBlock = startBlock.add(rewardDurationValue);\\n        lastUpdateBlock = startBlock;\\n    }\\n\\n    /*\\n     * @notice Set the duration of the pool\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        endBlock = startBlock.add(_durationBlocks);\\n        poolCalcRewardPerBlock();\\n    }\\n\\n    /*\\n     * @notice Set the duration and start block of the pool\\n     * @param _startBlock: start block\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStartAndDuration(\\n        uint256 _startBlock,\\n        uint256 _durationBlocks\\n    ) public onlyOwner {\\n        poolSetStart(_startBlock);\\n        poolSetDuration(_durationBlocks);\\n    }\\n\\n    /*\\n     * @notice Calculates the rewardPerBlock of the pool\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolCalcRewardPerBlock() public onlyOwner {\\n        uint256 rewardBal = rewardToken.balanceOf(address(this)).sub(\\n            totalStaked\\n        );\\n        rewardPerBlock = rewardBal.div(rewardDuration());\\n    }\\n\\n    /*\\n     * @notice Sets the max reward amount for a TX\\n     * @param _maxTxAmount: max TX amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetRewardMaxTxAmount(uint256 _maxTxAmount) public onlyOwner {\\n        rewardMaxTxAmount = _maxTxAmount;\\n    }\\n\\n    /*\\n     * @notice Gets the reward duration\\n     * @return reward duration\\n     */\\n    function rewardDuration() public view returns (uint256) {\\n        return endBlock.sub(startBlock);\\n    }\\n\\n    /*\\n     * @notice Gets the reward per block for UI\\n     * @return reward per block\\n     */\\n    function rewardPerBlockUI() public view returns (uint256) {\\n        return rewardPerBlock.div(10**uint256(rewardTokenDecimals));\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function withdrawRemains(address _to) public onlyOwner {\\n        require(block.number > endBlock, \\\"Error: Pool not finished yet\\\");\\n        require(totalStaked == 0, \\\"Error: Someone has staked tokens\\\");\\n        uint256 tokenBal = rewardToken.balanceOf(address(this));\\n        require(tokenBal > 0, \\\"Error: No remaining funds\\\");\\n        IERC20(rewardToken).safeTransfer(_to, tokenBal);\\n    }\\n\\n    /*\\n     * @notice Deposit funds for reward\\n     * @param _to The address where the funds will be sent\\n     */\\n    function depositRewardFunds(uint256 _amount) public onlyOwner {\\n        IERC20(rewardToken).safeTransfer(address(this), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xce590fa082464af9aaa0ad36989c532a96161ab6f7331a1b89b1035a2e27e006\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600b5534801561001557600080fd5b5061001f33610028565b60018055610078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611fb8806100876000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80638f66291511610151578063d3a8615c116100c3578063edbf4ac211610087578063edbf4ac2146104fa578063f2fde38b1461050d578063f3e4dd3014610520578063f40f0f5214610533578063f520e7e514610546578063f7c618c11461054e57600080fd5b8063d3a8615c146104b0578063db2e21bc146104c3578063e3df7270146104cb578063e78ec42e146104d4578063ea9041e4146104e757600080fd5b8063a218141b11610115578063a218141b1461045d578063a2ba0bc714610466578063b3f02d381461046e578063b6b55f2514610481578063cc7a262e14610494578063ccd34cd5146104a757600080fd5b80638f6629151461040257806392e8990e1461040b5780639513997f146104185780639bdcecd11461042b578063a0b409051461044a57600080fd5b806350a0621d116101ea578063715018a6116101ae578063715018a6146103a85780637bfaa40c146103b057806380dc0672146103c3578063817b1cd2146103cb5780638ae39cac146103d45780638da5cb5b146103dd57600080fd5b806350a0621d14610372578063576e093b1461037b5780635bb06ead1461038e578063636bfbab1461039657806366fe9f8a1461039f57600080fd5b80632e1a7d4d1161023c5780632e1a7d4d1461031b5780633279beab1461032e578063392e53cd146103415780633f138d4b1461034e57806348cd4cb1146103615780634e71d92d1461036a57600080fd5b806301f8a97614610279578063054546941461028e578063083c6323146102b557806310f8097b146102cc5780631959a002146102df575b600080fd5b61028c610287366004611c6d565b610561565b005b6002546102a090610100900460ff1681565b60405190151581526020015b60405180910390f35b6102be60065481565b6040519081526020016102ac565b61028c6102da366004611c6d565b6105f0565b6103066102ed366004611b8c565b6012602052600090815260409020805460019091015482565b604080519283526020830191909152016102ac565b61028c610329366004611c6d565b61062a565b61028c61033c366004611c6d565b610796565b6004546102a09060ff1681565b61028c61035c366004611ba8565b6107d7565b6102be60075481565b61028c61090a565b6102be600b5481565b61028c610389366004611b8c565b6109e3565b6102be610b97565b6102be60035481565b6102be60095481565b61028c610bbd565b61028c6103be366004611c6d565b610bf3565b61028c610c56565b6102be600d5481565b6102be600a5481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102ac565b6102be60055481565b6002546102a09060ff1681565b61028c610426366004611c9d565b610c86565b600c546104389060ff1681565b60405160ff90911681526020016102ac565b61028c610458366004611bef565b610de4565b6102be60085481565b61028c610ef6565b61028c61047c366004611c6d565b610fc1565b61028c61048f366004611c6d565b611034565b6011546103ea906001600160a01b031681565b6102be600e5481565b61028c6104be366004611c9d565b611225565b61028c611261565b6102be600f5481565b61028c6104e2366004611c6d565b611309565b61028c6104f5366004611c6d565b611338565b61028c610508366004611c0c565b611379565b61028c61051b366004611b8c565b61154d565b61028c61052e366004611c6d565b6115e5565b6102be610541366004611b8c565b611614565b6102be6116f5565b6010546103ea906001600160a01b031681565b6000546001600160a01b031633146105945760405162461bcd60e51b815260040161058b90611d58565b60405180910390fd5b60075443106105b55760405162461bcd60e51b815260040161058b90611d2e565b600a8190556040518181527f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df9060200160405180910390a150565b6000546001600160a01b0316331461061a5760405162461bcd60e51b815260040161058b90611d58565b61062761047c438361170e565b50565b6002600154141561064d5760405162461bcd60e51b815260040161058b90611d8d565b600260015533600090815260126020526040902080548211156106b25760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e7420746f20776974686472617720746f6f20686967680000000000604482015260640161058b565b6106ba611723565b60006106ef82600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b9061179a565b906117a6565b9050821561072d57815461070390846117a6565b825560115461071c906001600160a01b031633856117b2565b600d5461072990846117a6565b600d555b801561073c5761073c8161181a565b600e54600554835461075392916106e3919061178e565b600183015560405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506001805550565b6000546001600160a01b031633146107c05760405162461bcd60e51b815260040161058b90611d58565b601054610627906001600160a01b031633836117b2565b6000546001600160a01b031633146108015760405162461bcd60e51b815260040161058b90611d58565b6011546001600160a01b03838116911614156108585760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba1031329039ba30b5b2b2103a37b5b2b760511b604482015260640161058b565b6010546001600160a01b03838116911614156108af5760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba103132903932bbb0b932103a37b5b2b760511b604482015260640161058b565b6108c36001600160a01b03831633836117b2565b604080516001600160a01b0384168152602081018390527f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812991015b60405180910390a15050565b6002600154141561092d5760405162461bcd60e51b815260040161058b90611d8d565b6002600155336000908152601260205260409020610949611723565b8054156109c257600061097982600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b905080156109c05761098a8161181a565b60405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a25b505b600e5460055482546109d992916106e3919061178e565b6001918201558055565b6000546001600160a01b03163314610a0d5760405162461bcd60e51b815260040161058b90611d58565b6006544311610a5e5760405162461bcd60e51b815260206004820152601c60248201527f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000604482015260640161058b565b600d5415610aae5760405162461bcd60e51b815260206004820181905260248201527f4572726f723a20536f6d656f6e6520686173207374616b656420746f6b656e73604482015260640161058b565b6010546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610af257600080fd5b505afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611c85565b905060008111610b7c5760405162461bcd60e51b815260206004820152601960248201527f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000604482015260640161058b565b601054610b93906001600160a01b031683836117b2565b5050565b600c54600090610bb890610baf9060ff16600a611e3f565b600a549061179a565b905090565b6000546001600160a01b03163314610be75760405162461bcd60e51b815260040161058b90611d58565b610bf1600061187f565b565b6000546001600160a01b03163314610c1d5760405162461bcd60e51b815260040161058b90611d58565b6007544310610c3e5760405162461bcd60e51b815260040161058b90611d2e565b600754610c4b908261170e565b600655610627610ef6565b6000546001600160a01b03163314610c805760405162461bcd60e51b815260040161058b90611d58565b43600655565b6000546001600160a01b03163314610cb05760405162461bcd60e51b815260040161058b90611d58565b6007544310610cd15760405162461bcd60e51b815260040161058b90611d2e565b808210610d375760405162461bcd60e51b815260206004820152602e60248201527f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160448201526d6e206e657720656e64426c6f636b60901b606482015260840161058b565b814310610d9f5760405162461bcd60e51b815260206004820152603060248201527f4e6577207374617274426c6f636b206d7573742062652068696768657220746860448201526f616e2063757272656e7420626c6f636b60801b606482015260840161058b565b60078290556006819055600882905560408051838152602081018390527f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0691016108fe565b6000546001600160a01b03163314610e0e5760405162461bcd60e51b815260040161058b90611d58565b60025460ff16610e4e5760405162461bcd60e51b815260206004820152600b60248201526a135d5cdd081899481cd95d60aa1b604482015260640161058b565b8115610eaf576009548111610ea55760405162461bcd60e51b815260206004820152601860248201527f4e6577206c696d6974206d757374206265206869676865720000000000000000604482015260640161058b565b6009819055610ec3565b6002805460ff191683151517905560006009555b7f241f67ee5f41b7a5cabf911367329be7215900f602ebfc47f89dce2a6bcd847c6009546040516108fe91815260200190565b6000546001600160a01b03163314610f205760405162461bcd60e51b815260040161058b90611d58565b600d546010546040516370a0823160e01b8152306004820152600092610fa79290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610f6f57600080fd5b505afa158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190611c85565b9050610fbb610fb46116f5565b829061179a565b600a5550565b6000546001600160a01b03163314610feb5760405162461bcd60e51b815260040161058b90611d58565b600754431061100c5760405162461bcd60e51b815260040161058b90611d2e565b60006110166116f5565b60078390559050611027828261170e565b6006555050600754600855565b600260015414156110575760405162461bcd60e51b815260040161058b90611d8d565b60026001819055336000908152601260205260409020905460ff16156110d557600954815461108790849061170e565b11156110d55760405162461bcd60e51b815260206004820152601760248201527f5573657220616d6f756e742061626f7665206c696d6974000000000000000000604482015260640161058b565b600254610100900460ff1615611143576003548210156111435760405162461bcd60e51b8152602060048201526024808201527f4465706f73697420616d6f756e74206e6f7420726561636820746865206d696e604482015263696d756d60e01b606482015260840161058b565b61114b611723565b80541561118e57600061117b82600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b9050801561118c5761118c8161181a565b505b81156111cb5780546111a0908361170e565b81556011546111ba906001600160a01b03163330856118cf565b600d546111c7908361170e565b600d555b600e5460055482546111e292916106e3919061178e565b600182015560405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a2505060018055565b6000546001600160a01b0316331461124f5760405162461bcd60e51b815260040161058b90611d58565b61125882610fc1565b610b9381610bf3565b600260015414156112845760405162461bcd60e51b815260040161058b90611d8d565b600260019081553360009081526012602052604081208054828255928101919091559080156112d5576011546112c4906001600160a01b031633836117b2565b600d546112d190826117a6565b600d555b815460405190815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590602001611215565b6000546001600160a01b031633146113335760405162461bcd60e51b815260040161058b90611d58565b600355565b6000546001600160a01b031633146113625760405162461bcd60e51b815260040161058b90611d58565b601054610627906001600160a01b031630836117b2565b60045460ff16156113c25760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161058b565b6004805460ff19166001179055601180546001600160a01b03808a166001600160a01b0319928316179092556010805492891692909116919091179055600a859055600784905560068390558115611427576002805460ff1916600117905560098290555b8015611442576002805461ff00191661010017905560038190555b601060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190611cbe565b600c805460ff191660ff929092169182179055601e81106115245760405162461bcd60e51b815260206004820152601660248201527504d75737420626520696e666572696f7220746f2033360541b604482015260640161058b565b61152f601e826117a6565b61153a90600a611e3f565b600e555050600754600855505050505050565b6000546001600160a01b031633146115775760405162461bcd60e51b815260040161058b90611d58565b6001600160a01b0381166115dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161058b565b6106278161187f565b6000546001600160a01b0316331461160f5760405162461bcd60e51b815260040161058b90611d58565b600b55565b6001600160a01b0381166000908152601260205260408120600d546008544311801561163f57508015155b156116c65760006116526008544361190d565b9050600061166b600a548361178e90919063ffffffff16565b9050600061169461168b856106e3600e548661178e90919063ffffffff16565b6005549061170e565b90506116bb85600101546106e9600e546106e3858a6000015461178e90919063ffffffff16565b979650505050505050565b6116ed82600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b949350505050565b6000610bb86007546006546117a690919063ffffffff16565b600061171a8284611dc4565b90505b92915050565b600854431161172e57565b600d548061173d575043600855565b600061174b6008544361190d565b90506000611764600a548361178e90919063ffffffff16565b905061178261168b846106e3600e548561178e90919063ffffffff16565b60055550504360085550565b600061171a8284611ee7565b600061171a8284611ddc565b600061171a8284611f06565b6040516001600160a01b03831660248201526044810182905261181590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611947565b505050565b600b5461183857601054610627906001600160a01b031633836117b2565b8015610627576000600b54821161184f5781611853565b600b545b905061185f82826117a6565b601054909250611879906001600160a01b031633836117b2565b50611838565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526119079085906323b872dd60e01b906084016117de565b50505050565b600060065482116119295761192282846117a6565b905061171d565b600654831061193a5750600061171d565b60065461192290846117a6565b600061199c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a199092919063ffffffff16565b80519091501561181557808060200190518101906119ba9190611bd3565b6118155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161058b565b6060611a288484600085611a32565b90505b9392505050565b606082471015611a935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161058b565b6001600160a01b0385163b611aea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161058b565b600080866001600160a01b03168587604051611b069190611cdf565b60006040518083038185875af1925050503d8060008114611b43576040519150601f19603f3d011682016040523d82523d6000602084013e611b48565b606091505b50915091506116bb82828660608315611b62575081611a2b565b825115611b725782518084602001fd5b8160405162461bcd60e51b815260040161058b9190611cfb565b600060208284031215611b9d578081fd5b8135611a2b81611f5f565b60008060408385031215611bba578081fd5b8235611bc581611f5f565b946020939093013593505050565b600060208284031215611be4578081fd5b8151611a2b81611f74565b60008060408385031215611c01578182fd5b8235611bc581611f74565b600080600080600080600060e0888a031215611c26578283fd5b8735611c3181611f5f565b96506020880135611c4181611f5f565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600060208284031215611c7e578081fd5b5035919050565b600060208284031215611c96578081fd5b5051919050565b60008060408385031215611caf578182fd5b50508035926020909101359150565b600060208284031215611ccf578081fd5b815160ff81168114611a2b578182fd5b60008251611cf1818460208701611f1d565b9190910192915050565b6020815260008251806020840152611d1a816040850160208701611f1d565b601f01601f19169190910160400192915050565b60208082526010908201526f141bdbdb081a185cc81cdd185c9d195960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611dd757611dd7611f49565b500190565b600082611df757634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115611e37578160001904821115611e1d57611e1d611f49565b80851615611e2a57918102915b93841c9390800290611e01565b509250929050565b600061171a8383600082611e555750600161171d565b81611e625750600061171d565b8160018114611e785760028114611e8257611e9e565b600191505061171d565b60ff841115611e9357611e93611f49565b50506001821b61171d565b5060208310610133831016604e8410600b8410161715611ec1575081810a61171d565b611ecb8383611dfc565b8060001904821115611edf57611edf611f49565b029392505050565b6000816000190483118215151615611f0157611f01611f49565b500290565b600082821015611f1857611f18611f49565b500390565b60005b83811015611f38578181015183820152602001611f20565b838111156119075750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461062757600080fd5b801515811461062757600080fdfea264697066735822122039f818990f2d06f24903835d7a3399ac465c05cbf578dae487f28171b60f05ec64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80638f66291511610151578063d3a8615c116100c3578063edbf4ac211610087578063edbf4ac2146104fa578063f2fde38b1461050d578063f3e4dd3014610520578063f40f0f5214610533578063f520e7e514610546578063f7c618c11461054e57600080fd5b8063d3a8615c146104b0578063db2e21bc146104c3578063e3df7270146104cb578063e78ec42e146104d4578063ea9041e4146104e757600080fd5b8063a218141b11610115578063a218141b1461045d578063a2ba0bc714610466578063b3f02d381461046e578063b6b55f2514610481578063cc7a262e14610494578063ccd34cd5146104a757600080fd5b80638f6629151461040257806392e8990e1461040b5780639513997f146104185780639bdcecd11461042b578063a0b409051461044a57600080fd5b806350a0621d116101ea578063715018a6116101ae578063715018a6146103a85780637bfaa40c146103b057806380dc0672146103c3578063817b1cd2146103cb5780638ae39cac146103d45780638da5cb5b146103dd57600080fd5b806350a0621d14610372578063576e093b1461037b5780635bb06ead1461038e578063636bfbab1461039657806366fe9f8a1461039f57600080fd5b80632e1a7d4d1161023c5780632e1a7d4d1461031b5780633279beab1461032e578063392e53cd146103415780633f138d4b1461034e57806348cd4cb1146103615780634e71d92d1461036a57600080fd5b806301f8a97614610279578063054546941461028e578063083c6323146102b557806310f8097b146102cc5780631959a002146102df575b600080fd5b61028c610287366004611c6d565b610561565b005b6002546102a090610100900460ff1681565b60405190151581526020015b60405180910390f35b6102be60065481565b6040519081526020016102ac565b61028c6102da366004611c6d565b6105f0565b6103066102ed366004611b8c565b6012602052600090815260409020805460019091015482565b604080519283526020830191909152016102ac565b61028c610329366004611c6d565b61062a565b61028c61033c366004611c6d565b610796565b6004546102a09060ff1681565b61028c61035c366004611ba8565b6107d7565b6102be60075481565b61028c61090a565b6102be600b5481565b61028c610389366004611b8c565b6109e3565b6102be610b97565b6102be60035481565b6102be60095481565b61028c610bbd565b61028c6103be366004611c6d565b610bf3565b61028c610c56565b6102be600d5481565b6102be600a5481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102ac565b6102be60055481565b6002546102a09060ff1681565b61028c610426366004611c9d565b610c86565b600c546104389060ff1681565b60405160ff90911681526020016102ac565b61028c610458366004611bef565b610de4565b6102be60085481565b61028c610ef6565b61028c61047c366004611c6d565b610fc1565b61028c61048f366004611c6d565b611034565b6011546103ea906001600160a01b031681565b6102be600e5481565b61028c6104be366004611c9d565b611225565b61028c611261565b6102be600f5481565b61028c6104e2366004611c6d565b611309565b61028c6104f5366004611c6d565b611338565b61028c610508366004611c0c565b611379565b61028c61051b366004611b8c565b61154d565b61028c61052e366004611c6d565b6115e5565b6102be610541366004611b8c565b611614565b6102be6116f5565b6010546103ea906001600160a01b031681565b6000546001600160a01b031633146105945760405162461bcd60e51b815260040161058b90611d58565b60405180910390fd5b60075443106105b55760405162461bcd60e51b815260040161058b90611d2e565b600a8190556040518181527f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df9060200160405180910390a150565b6000546001600160a01b0316331461061a5760405162461bcd60e51b815260040161058b90611d58565b61062761047c438361170e565b50565b6002600154141561064d5760405162461bcd60e51b815260040161058b90611d8d565b600260015533600090815260126020526040902080548211156106b25760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e7420746f20776974686472617720746f6f20686967680000000000604482015260640161058b565b6106ba611723565b60006106ef82600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b9061179a565b906117a6565b9050821561072d57815461070390846117a6565b825560115461071c906001600160a01b031633856117b2565b600d5461072990846117a6565b600d555b801561073c5761073c8161181a565b600e54600554835461075392916106e3919061178e565b600183015560405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506001805550565b6000546001600160a01b031633146107c05760405162461bcd60e51b815260040161058b90611d58565b601054610627906001600160a01b031633836117b2565b6000546001600160a01b031633146108015760405162461bcd60e51b815260040161058b90611d58565b6011546001600160a01b03838116911614156108585760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba1031329039ba30b5b2b2103a37b5b2b760511b604482015260640161058b565b6010546001600160a01b03838116911614156108af5760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba103132903932bbb0b932103a37b5b2b760511b604482015260640161058b565b6108c36001600160a01b03831633836117b2565b604080516001600160a01b0384168152602081018390527f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812991015b60405180910390a15050565b6002600154141561092d5760405162461bcd60e51b815260040161058b90611d8d565b6002600155336000908152601260205260409020610949611723565b8054156109c257600061097982600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b905080156109c05761098a8161181a565b60405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a25b505b600e5460055482546109d992916106e3919061178e565b6001918201558055565b6000546001600160a01b03163314610a0d5760405162461bcd60e51b815260040161058b90611d58565b6006544311610a5e5760405162461bcd60e51b815260206004820152601c60248201527f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000604482015260640161058b565b600d5415610aae5760405162461bcd60e51b815260206004820181905260248201527f4572726f723a20536f6d656f6e6520686173207374616b656420746f6b656e73604482015260640161058b565b6010546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610af257600080fd5b505afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611c85565b905060008111610b7c5760405162461bcd60e51b815260206004820152601960248201527f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000604482015260640161058b565b601054610b93906001600160a01b031683836117b2565b5050565b600c54600090610bb890610baf9060ff16600a611e3f565b600a549061179a565b905090565b6000546001600160a01b03163314610be75760405162461bcd60e51b815260040161058b90611d58565b610bf1600061187f565b565b6000546001600160a01b03163314610c1d5760405162461bcd60e51b815260040161058b90611d58565b6007544310610c3e5760405162461bcd60e51b815260040161058b90611d2e565b600754610c4b908261170e565b600655610627610ef6565b6000546001600160a01b03163314610c805760405162461bcd60e51b815260040161058b90611d58565b43600655565b6000546001600160a01b03163314610cb05760405162461bcd60e51b815260040161058b90611d58565b6007544310610cd15760405162461bcd60e51b815260040161058b90611d2e565b808210610d375760405162461bcd60e51b815260206004820152602e60248201527f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160448201526d6e206e657720656e64426c6f636b60901b606482015260840161058b565b814310610d9f5760405162461bcd60e51b815260206004820152603060248201527f4e6577207374617274426c6f636b206d7573742062652068696768657220746860448201526f616e2063757272656e7420626c6f636b60801b606482015260840161058b565b60078290556006819055600882905560408051838152602081018390527f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0691016108fe565b6000546001600160a01b03163314610e0e5760405162461bcd60e51b815260040161058b90611d58565b60025460ff16610e4e5760405162461bcd60e51b815260206004820152600b60248201526a135d5cdd081899481cd95d60aa1b604482015260640161058b565b8115610eaf576009548111610ea55760405162461bcd60e51b815260206004820152601860248201527f4e6577206c696d6974206d757374206265206869676865720000000000000000604482015260640161058b565b6009819055610ec3565b6002805460ff191683151517905560006009555b7f241f67ee5f41b7a5cabf911367329be7215900f602ebfc47f89dce2a6bcd847c6009546040516108fe91815260200190565b6000546001600160a01b03163314610f205760405162461bcd60e51b815260040161058b90611d58565b600d546010546040516370a0823160e01b8152306004820152600092610fa79290916001600160a01b03909116906370a082319060240160206040518083038186803b158015610f6f57600080fd5b505afa158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190611c85565b9050610fbb610fb46116f5565b829061179a565b600a5550565b6000546001600160a01b03163314610feb5760405162461bcd60e51b815260040161058b90611d58565b600754431061100c5760405162461bcd60e51b815260040161058b90611d2e565b60006110166116f5565b60078390559050611027828261170e565b6006555050600754600855565b600260015414156110575760405162461bcd60e51b815260040161058b90611d8d565b60026001819055336000908152601260205260409020905460ff16156110d557600954815461108790849061170e565b11156110d55760405162461bcd60e51b815260206004820152601760248201527f5573657220616d6f756e742061626f7665206c696d6974000000000000000000604482015260640161058b565b600254610100900460ff1615611143576003548210156111435760405162461bcd60e51b8152602060048201526024808201527f4465706f73697420616d6f756e74206e6f7420726561636820746865206d696e604482015263696d756d60e01b606482015260840161058b565b61114b611723565b80541561118e57600061117b82600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b9050801561118c5761118c8161181a565b505b81156111cb5780546111a0908361170e565b81556011546111ba906001600160a01b03163330856118cf565b600d546111c7908361170e565b600d555b600e5460055482546111e292916106e3919061178e565b600182015560405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a2505060018055565b6000546001600160a01b0316331461124f5760405162461bcd60e51b815260040161058b90611d58565b61125882610fc1565b610b9381610bf3565b600260015414156112845760405162461bcd60e51b815260040161058b90611d8d565b600260019081553360009081526012602052604081208054828255928101919091559080156112d5576011546112c4906001600160a01b031633836117b2565b600d546112d190826117a6565b600d555b815460405190815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590602001611215565b6000546001600160a01b031633146113335760405162461bcd60e51b815260040161058b90611d58565b600355565b6000546001600160a01b031633146113625760405162461bcd60e51b815260040161058b90611d58565b601054610627906001600160a01b031630836117b2565b60045460ff16156113c25760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161058b565b6004805460ff19166001179055601180546001600160a01b03808a166001600160a01b0319928316179092556010805492891692909116919091179055600a859055600784905560068390558115611427576002805460ff1916600117905560098290555b8015611442576002805461ff00191661010017905560038190555b601060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190611cbe565b600c805460ff191660ff929092169182179055601e81106115245760405162461bcd60e51b815260206004820152601660248201527504d75737420626520696e666572696f7220746f2033360541b604482015260640161058b565b61152f601e826117a6565b61153a90600a611e3f565b600e555050600754600855505050505050565b6000546001600160a01b031633146115775760405162461bcd60e51b815260040161058b90611d58565b6001600160a01b0381166115dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161058b565b6106278161187f565b6000546001600160a01b0316331461160f5760405162461bcd60e51b815260040161058b90611d58565b600b55565b6001600160a01b0381166000908152601260205260408120600d546008544311801561163f57508015155b156116c65760006116526008544361190d565b9050600061166b600a548361178e90919063ffffffff16565b9050600061169461168b856106e3600e548661178e90919063ffffffff16565b6005549061170e565b90506116bb85600101546106e9600e546106e3858a6000015461178e90919063ffffffff16565b979650505050505050565b6116ed82600101546106e9600e546106e3600554876000015461178e90919063ffffffff16565b949350505050565b6000610bb86007546006546117a690919063ffffffff16565b600061171a8284611dc4565b90505b92915050565b600854431161172e57565b600d548061173d575043600855565b600061174b6008544361190d565b90506000611764600a548361178e90919063ffffffff16565b905061178261168b846106e3600e548561178e90919063ffffffff16565b60055550504360085550565b600061171a8284611ee7565b600061171a8284611ddc565b600061171a8284611f06565b6040516001600160a01b03831660248201526044810182905261181590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611947565b505050565b600b5461183857601054610627906001600160a01b031633836117b2565b8015610627576000600b54821161184f5781611853565b600b545b905061185f82826117a6565b601054909250611879906001600160a01b031633836117b2565b50611838565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526119079085906323b872dd60e01b906084016117de565b50505050565b600060065482116119295761192282846117a6565b905061171d565b600654831061193a5750600061171d565b60065461192290846117a6565b600061199c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a199092919063ffffffff16565b80519091501561181557808060200190518101906119ba9190611bd3565b6118155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161058b565b6060611a288484600085611a32565b90505b9392505050565b606082471015611a935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161058b565b6001600160a01b0385163b611aea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161058b565b600080866001600160a01b03168587604051611b069190611cdf565b60006040518083038185875af1925050503d8060008114611b43576040519150601f19603f3d011682016040523d82523d6000602084013e611b48565b606091505b50915091506116bb82828660608315611b62575081611a2b565b825115611b725782518084602001fd5b8160405162461bcd60e51b815260040161058b9190611cfb565b600060208284031215611b9d578081fd5b8135611a2b81611f5f565b60008060408385031215611bba578081fd5b8235611bc581611f5f565b946020939093013593505050565b600060208284031215611be4578081fd5b8151611a2b81611f74565b60008060408385031215611c01578182fd5b8235611bc581611f74565b600080600080600080600060e0888a031215611c26578283fd5b8735611c3181611f5f565b96506020880135611c4181611f5f565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600060208284031215611c7e578081fd5b5035919050565b600060208284031215611c96578081fd5b5051919050565b60008060408385031215611caf578182fd5b50508035926020909101359150565b600060208284031215611ccf578081fd5b815160ff81168114611a2b578182fd5b60008251611cf1818460208701611f1d565b9190910192915050565b6020815260008251806020840152611d1a816040850160208701611f1d565b601f01601f19169190910160400192915050565b60208082526010908201526f141bdbdb081a185cc81cdd185c9d195960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611dd757611dd7611f49565b500190565b600082611df757634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115611e37578160001904821115611e1d57611e1d611f49565b80851615611e2a57918102915b93841c9390800290611e01565b509250929050565b600061171a8383600082611e555750600161171d565b81611e625750600061171d565b8160018114611e785760028114611e8257611e9e565b600191505061171d565b60ff841115611e9357611e93611f49565b50506001821b61171d565b5060208310610133831016604e8410600b8410161715611ec1575081810a61171d565b611ecb8383611dfc565b8060001904821115611edf57611edf611f49565b029392505050565b6000816000190483118215151615611f0157611f01611f49565b500290565b600082821015611f1857611f18611f49565b500390565b60005b83811015611f38578181015183820152602001611f20565b838111156119075750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461062757600080fd5b801515811461062757600080fdfea264697066735822122039f818990f2d06f24903835d7a3399ac465c05cbf578dae487f28171b60f05ec64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 497,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3593,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "hasUserLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3595,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "hasDepositMin",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3597,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "minimumDeposit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3599,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "isInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3601,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "accTokenPerShare",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3603,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "endBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3605,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "startBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3607,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3609,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "poolLimitPerUser",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3611,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3614,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "rewardMaxTxAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3616,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "rewardTokenDecimals",
        "offset": 0,
        "slot": "12",
        "type": "t_uint8"
      },
      {
        "astId": 3618,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "totalStaked",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3620,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "PRECISION_FACTOR",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3622,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "PRECISION_FACTOR_STAKED",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3625,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IERC20)1192"
      },
      {
        "astId": 3628,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "stakedToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)1192"
      },
      {
        "astId": 3633,
        "contract": "contracts/GQStake.sol:GQStake",
        "label": "userInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(UserInfo)3638_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1192": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3638_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GQStake.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3638_storage"
      },
      "t_struct(UserInfo)3638_storage": {
        "encoding": "inplace",
        "label": "struct GQStake.UserInfo",
        "members": [
          {
            "astId": 3635,
            "contract": "contracts/GQStake.sol:GQStake",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3637,
            "contract": "contracts/GQStake.sol:GQStake",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}