{
  "address": "0xd86B7a85bE266820B92c5bF785dc9dDc47ed1bD6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyRewardWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCalcRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "name": "poolSetStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetStartAndDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "poolStartIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlockUI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "setLockUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRemains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3707bb1e2aa09aca958bdadb16ec5eee02e3a108d086a6e04fa10fe634e1105",
  "receipt": {
    "to": null,
    "from": "0x55d90B6C500E826dBbca09CE502cDC6cA3652977",
    "contractAddress": "0xd86B7a85bE266820B92c5bF785dc9dDc47ed1bD6",
    "transactionIndex": 3,
    "gasUsed": "3417676",
    "logsBloom": "0x00000000000000000000000100000000000000000000000000800000000000000000000000000000000000000000000400000000000000000000000040000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000008000400000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000400000000000000000000",
    "blockHash": "0xc5a4c96f84fa1a2d560b2ca0681273c5843805a4d542077c8d3c17041328ac2f",
    "transactionHash": "0xe3707bb1e2aa09aca958bdadb16ec5eee02e3a108d086a6e04fa10fe634e1105",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 16055393,
        "transactionHash": "0xe3707bb1e2aa09aca958bdadb16ec5eee02e3a108d086a6e04fa10fe634e1105",
        "address": "0xd86B7a85bE266820B92c5bF785dc9dDc47ed1bD6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000055d90b6c500e826dbbca09ce502cdc6ca3652977"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xc5a4c96f84fa1a2d560b2ca0681273c5843805a4d542077c8d3c17041328ac2f"
      }
    ],
    "blockNumber": 16055393,
    "cumulativeGasUsed": "3639090",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0048BF5C64b765B8beDd1DD4a53595B2ce999Ae0",
    "0xCd878382E3AC5ff829C8055399707119ebC5255E",
    14537386,
    23811317,
    7776000,
    500,
    "0x225D87f62928160CE060Bb0c119FC0Eb550d41E9"
  ],
  "numDeployments": 3,
  "solcInputHash": "f932bf0d8b8c5bc3507296417438c618",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCalcRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"poolSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetStartAndDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"poolStartIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"setLockUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRemains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stake.sol\":\"Stake\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Stake is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Accrued token per share\\n    uint256 public accTokenPerShare;\\n\\n    // The block number when REWARD distribution ends.\\n    uint256 public endBlock;\\n\\n    // The block number when REWARD distribution starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastUpdateBlock;\\n\\n    // REWARD tokens created per block.\\n    uint256 public rewardPerBlock;\\n\\n    // Lockup duration for deposit\\n    uint256 public lockUpDuration;\\n\\n    // Withdraw fee in BP\\n    uint256 public withdrawFee;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR;\\n\\n    // decimals places of the reward token\\n    uint8 public rewardTokenDecimals;\\n\\n    // Withdraw fee destiny address\\n    address public feeAddress;\\n\\n    // The reward token\\n    IERC20 public rewardToken;\\n\\n    // The staked token\\n    IERC20 public stakedToken;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // Staked tokens the user has provided\\n        uint256 rewardDebt; // Reward debt\\n        uint256 firstDeposit; // First deposit before withdraw\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event RewardsStop(uint256 blockNumber);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /*\\n     * @notice Constructor of the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _endBlock: end block\\n     * @param _lockUpDuration: duration for the deposit\\n     * @param _withdrawFee: fee for early withdraw\\n     * @param _feeAddress: address where fees for early withdraw will be send\\n     */\\n    constructor(\\n        IERC20 _stakedToken,\\n        IERC20 _rewardToken,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _lockUpDuration,\\n        uint256 _withdrawFee,\\n        address _feeAddress\\n    ) {\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        lockUpDuration = _lockUpDuration;\\n        withdrawFee = _withdrawFee;\\n        feeAddress = _feeAddress;\\n\\n        rewardTokenDecimals = IERC20Metadata(address(rewardToken)).decimals();\\n        uint256 decimalsRewardToken = uint256(rewardTokenDecimals);\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\n\\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to deposit (in stakedToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakedToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.firstDeposit = user.firstDeposit == 0\\n                ? block.timestamp\\n                : user.firstDeposit;\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"Error: Invalid amount\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n        _updatePool();\\n\\n        uint256 pending = user\\n            .amount\\n            .mul(accTokenPerShare)\\n            .div(PRECISION_FACTOR)\\n            .sub(user.rewardDebt);\\n\\n        user.amount = user.amount.sub(_amount);\\n        uint256 _amountToSend = _amount;\\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\\n                10000\\n            );\\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n            _amountToSend = _amountToSend - _feeAmountToSend;\\n        }\\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\\n        user.firstDeposit = user.firstDeposit == 0\\n            ? block.timestamp\\n            : user.firstDeposit;\\n\\n        if (pending > 0) {\\n            safeTokenTransfer(msg.sender, pending);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Claim reward tokens\\n     */\\n    function claim() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n\\n            if (pending > 0) {\\n                safeTokenTransfer(msg.sender, pending);\\n                emit Claim(msg.sender, pending);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n    }\\n\\n    /*\\n     * @notice SendPending tokens to claimer\\n     * @param pending: amount to claim\\n     */\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n        if (_amount > rewardTokenBalance) {\\n            rewardToken.safeTransfer(_to, rewardTokenBalance);\\n        } else {\\n            rewardToken.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Avoid users send an amount with 0 tokens\\n        if (_amountToTransfer > 0) {\\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n                uint256 _feeAmountToSend = _amountToTransfer.mul(withdrawFee).div(10000);\\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\\n            }\\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner. Needs to be for emergency.\\n     */\\n    //TODO: Review\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\n        rewardToken.safeTransfer(address(msg.sender), _amount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != address(rewardToken),\\n            \\\"Cannot be reward token\\\"\\n        );\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"New startBlock must be lower than new endBlock\\\"\\n        );\\n        require(\\n            block.number < _startBlock,\\n            \\\"New startBlock must be higher than current block\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        endBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n            uint256 tokenReward = multiplier.mul(rewardPerBlock);\\n            uint256 adjustedTokenPerShare = accTokenPerShare.add(\\n                tokenReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n            );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedTokenPerShare)\\n                    .div(PRECISION_FACTOR)\\n                    .sub(user.rewardDebt);\\n        } else {\\n            return\\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\\n                    user.rewardDebt\\n                );\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastUpdateBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastUpdateBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n        uint256 tokenReward = multiplier.mul(rewardPerBlock);\\n        accTokenPerShare = accTokenPerShare.add(\\n            tokenReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n        );\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     * @return multiplier\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= endBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock.sub(_from);\\n        }\\n    }\\n\\n    /*\\n     * @notice Sets the lock up duration\\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\\n     * @dev This function is only callable by owner.\\n     */\\n    function setLockUpDuration(uint256 _lockUpDuration) public onlyOwner {\\n        lockUpDuration = _lockUpDuration;\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool given a block amount\\n     * @param _blocks: block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolStartIn(uint256 _blocks) public onlyOwner {\\n        poolSetStart(block.number.add(_blocks));\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool\\n     * @param _startBlock: start block\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        uint256 rewardDurationValue = rewardDuration();\\n        startBlock = _startBlock;\\n        endBlock = startBlock.add(rewardDurationValue);\\n        lastUpdateBlock = startBlock;\\n    }\\n\\n    /*\\n     * @notice Set the duration of the pool\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        endBlock = startBlock.add(_durationBlocks);\\n        poolCalcRewardPerBlock();\\n    }\\n\\n    /*\\n     * @notice Set the duration and start block of the pool\\n     * @param _startBlock: start block\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStartAndDuration(\\n        uint256 _startBlock,\\n        uint256 _durationBlocks\\n    ) public onlyOwner {\\n        poolSetStart(_startBlock);\\n        poolSetDuration(_durationBlocks);\\n    }\\n\\n    /*\\n     * @notice Calculates the rewardPerBlock of the pool\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolCalcRewardPerBlock() public onlyOwner {\\n        uint256 rewardBal = rewardToken.balanceOf(address(this));\\n        rewardPerBlock = rewardBal.div(rewardDuration());\\n    }\\n\\n    /*\\n     * @notice Gets the reward duration\\n     * @return reward duration\\n     */\\n    function rewardDuration() public view returns (uint256) {\\n        return endBlock.sub(startBlock);\\n    }\\n\\n    /*\\n     * @notice Gets the reward per block for UI\\n     * @return reward per block\\n     */\\n    function rewardPerBlockUI() public view returns (uint256) {\\n        return rewardPerBlock.div(10**uint256(rewardTokenDecimals));\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function withdrawRemains(address _to) public onlyOwner {\\n        require(block.number > endBlock, \\\"Error: Pool not finished yet\\\");\\n        uint256 tokenBal = rewardToken.balanceOf(address(this));\\n        require(tokenBal > 0, \\\"Error: No remaining funds\\\");\\n        IERC20(rewardToken).safeTransfer(_to, tokenBal);\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function depositRewardFunds(uint256 _amount) public onlyOwner {\\n        IERC20(rewardToken).safeTransfer(address(this), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe97c2b3c85b786e02cc5c8ae72a54dcdc549642351d34e8e137979775fa2be55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200406e3803806200406e8339818101604052810190620000379190620003de565b620000576200004b6200029e60201b60201c565b620002a660201b60201c565b6001808190555086600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460048190555083600381905550826007819055508160088190555080600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620001a657600080fd5b505afa158015620001bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e191906200048b565b600a60006101000a81548160ff021916908360ff1602179055506000600a60009054906101000a900460ff1660ff169050601e811062000258576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024f90620004de565b60405180910390fd5b6200027381601e6200036a60201b620021cb1790919060201c565b600a6200028191906200056c565b600981905550600454600581905550505050505050505062000810565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836200037a9190620006a9565b905092915050565b6000815190506200039381620007a8565b92915050565b600081519050620003aa81620007c2565b92915050565b600081519050620003c181620007dc565b92915050565b600081519050620003d881620007f6565b92915050565b600080600080600080600060e0888a031215620003fa57600080fd5b60006200040a8a828b0162000399565b97505060206200041d8a828b0162000399565b9650506040620004308a828b01620003b0565b9550506060620004438a828b01620003b0565b9450506080620004568a828b01620003b0565b93505060a0620004698a828b01620003b0565b92505060c06200047c8a828b0162000382565b91505092959891949750929550565b6000602082840312156200049e57600080fd5b6000620004ae84828501620003c7565b91505092915050565b6000620004c660168362000500565b9150620004d3826200077f565b602082019050919050565b60006020820190508181036000830152620004f981620004b7565b9050919050565b600082825260208201905092915050565b6000808291508390505b600185111562000563578086048111156200053b576200053a62000743565b5b60018516156200054b5780820291505b80810290506200055b8562000772565b94506200051b565b94509492505050565b600062000579826200072c565b915062000586836200072c565b9250620005b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005bd565b905092915050565b600082620005cf5760019050620006a2565b81620005df5760009050620006a2565b8160018114620005f85760028114620006035762000639565b6001915050620006a2565b60ff84111562000618576200061762000743565b5b8360020a91508482111562000632576200063162000743565b5b50620006a2565b5060208310610133831016604e8410600b8410161715620006735782820a9050838111156200066d576200066c62000743565b5b620006a2565b62000682848484600162000511565b925090508184048111156200069c576200069b62000743565b5b81810290505b9392505050565b6000620006b6826200072c565b9150620006c3836200072c565b925082821015620006d957620006d862000743565b5b828203905092915050565b6000620006f1826200070c565b9050919050565b60006200070582620006e4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b7f4d75737420626520696e666572696f7220746f20333000000000000000000000600082015250565b620007b381620006e4565b8114620007bf57600080fd5b50565b620007cd81620006f8565b8114620007d957600080fd5b50565b620007e7816200072c565b8114620007f357600080fd5b50565b620008018162000736565b81146200080d57600080fd5b50565b61384e80620008206000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80638f66291511610125578063d3a8615c116100ad578063ea9041e41161007c578063ea9041e41461055b578063f2fde38b14610577578063f40f0f5214610593578063f520e7e5146105c3578063f7c618c1146105e15761021c565b8063d3a8615c146104fb578063db2e21bc14610517578063e1b2addc14610521578063e941fa781461053d5761021c565b8063a2ba0bc7116100f4578063a2ba0bc71461047d578063b3f02d3814610487578063b6b55f25146104a3578063cc7a262e146104bf578063ccd34cd5146104dd5761021c565b80638f662915146104075780639513997f146104255780639bdcecd114610441578063a218141b1461045f5761021c565b80634e71d92d116101a8578063715018a611610177578063715018a61461039b5780637bfaa40c146103a557806380dc0672146103c15780638ae39cac146103cb5780638da5cb5b146103e95761021c565b80634e71d92d14610339578063576e093b146103435780635bb06ead1461035f5780636aa662b51461037d5761021c565b80632e1a7d4d116101ef5780632e1a7d4d146102a95780633279beab146102c55780633f138d4b146102e157806341275358146102fd57806348cd4cb11461031b5761021c565b806301f8a97614610221578063083c63231461023d57806310f8097b1461025b5780631959a00214610277575b600080fd5b61023b60048036038101906102369190612a48565b6105ff565b005b610245610700565b6040516102529190613038565b60405180910390f35b61027560048036038101906102709190612a48565b610706565b005b610291600480360381019061028c91906129ba565b6107a0565b6040516102a09392919061307c565b60405180910390f35b6102c360048036038101906102be9190612a48565b6107ca565b005b6102df60048036038101906102da9190612a48565b610b2e565b005b6102fb60048036038101906102f691906129e3565b610bfa565b005b610305610e00565b6040516103129190612da0565b60405180910390f35b610323610e26565b6040516103309190613038565b60405180910390f35b610341610e2c565b005b61035d600480360381019061035891906129ba565b610fbc565b005b6103676111bf565b6040516103749190613038565b60405180910390f35b6103856111f9565b6040516103929190613038565b60405180910390f35b6103a36111ff565b005b6103bf60048036038101906103ba9190612a48565b611287565b005b6103c961136d565b005b6103d36113f2565b6040516103e09190613038565b60405180910390f35b6103f16113f8565b6040516103fe9190612da0565b60405180910390f35b61040f611421565b60405161041c9190613038565b60405180910390f35b61043f600480360381019061043a9190612a9a565b611427565b005b6104496115bf565b60405161045691906130b3565b60405180910390f35b6104676115d2565b6040516104749190613038565b60405180910390f35b6104856115d8565b005b6104a1600480360381019061049c9190612a48565b611726565b005b6104bd60048036038101906104b89190612a48565b611821565b005b6104c7611a4a565b6040516104d49190612e1b565b60405180910390f35b6104e5611a70565b6040516104f29190613038565b60405180910390f35b61051560048036038101906105109190612a9a565b611a76565b005b61051f611b08565b005b61053b60048036038101906105369190612a48565b611d2b565b005b610545611db1565b6040516105529190613038565b60405180910390f35b61057560048036038101906105709190612a48565b611db7565b005b610591600480360381019061058c91906129ba565b611e83565b005b6105ad60048036038101906105a891906129ba565b611f7b565b6040516105ba9190613038565b60405180910390f35b6105cb612187565b6040516105d89190613038565b60405180910390f35b6105e96121a5565b6040516105f69190612e1b565b60405180910390f35b6106076121e1565b73ffffffffffffffffffffffffffffffffffffffff166106256113f8565b73ffffffffffffffffffffffffffffffffffffffff161461067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290612f58565b60405180910390fd5b60045443106106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690612e98565b60405180910390fd5b806006819055507f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df816040516106f59190613038565b60405180910390a150565b60035481565b61070e6121e1565b73ffffffffffffffffffffffffffffffffffffffff1661072c6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990612f58565b60405180910390fd5b61079d61079882436121e990919063ffffffff16565b611726565b50565b600d6020528060005260406000206000915090508060000154908060010154908060020154905083565b60026001541415610810576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080790613018565b60405180910390fd5b60026001819055506000811161085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290612f18565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816000015410156108e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dc90612f98565b60405180910390fd5b6108ed6121ff565b60006109328260010154610924600954610916600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b905061094b8383600001546121cb90919063ffffffff16565b82600001819055506000839050600754836002015461096a9190613100565b421015610a1d57600061099c61271061098e6008548561234990919063ffffffff16565b61235f90919063ffffffff16565b9050610a0d600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b8082610a199190613352565b9150505b610a6a3382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b6000836002015414610a80578260020154610a82565b425b83600201819055506000821115610a9e57610a9d33836123fb565b5b610acb600954610abd600254866000015461234990919063ffffffff16565b61235f90919063ffffffff16565b83600101819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436485604051610b199190613038565b60405180910390a25050506001808190555050565b610b366121e1565b73ffffffffffffffffffffffffffffffffffffffff16610b546113f8565b73ffffffffffffffffffffffffffffffffffffffff1614610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190612f58565b60405180910390fd5b610bf73382600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b50565b610c026121e1565b73ffffffffffffffffffffffffffffffffffffffff16610c206113f8565b73ffffffffffffffffffffffffffffffffffffffff1614610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d90612f58565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfe90612fd8565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8f90612f78565b60405180910390fd5b610dc333828473ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b7f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051610df4929190612df2565b60405180910390a15050565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60026001541415610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6990613018565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ec56121ff565b600081600001541115610f7d576000610f178260010154610f09600954610efb600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b90506000811115610f7b57610f2c33826123fb565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610f729190613038565b60405180910390a25b505b610faa600954610f9c600254846000015461234990919063ffffffff16565b61235f90919063ffffffff16565b81600101819055505060018081905550565b610fc46121e1565b73ffffffffffffffffffffffffffffffffffffffff16610fe26113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f90612f58565b60405180910390fd5b600354431161107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107390612e78565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110d99190612da0565b60206040518083038186803b1580156110f157600080fd5b505afa158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111299190612a71565b90506000811161116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590612ef8565b60405180910390fd5b6111bb8282600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b5050565b60006111f4600a60009054906101000a900460ff1660ff16600a6111e391906131da565b60065461235f90919063ffffffff16565b905090565b60075481565b6112076121e1565b73ffffffffffffffffffffffffffffffffffffffff166112256113f8565b73ffffffffffffffffffffffffffffffffffffffff161461127b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127290612f58565b60405180910390fd5b6112856000612557565b565b61128f6121e1565b73ffffffffffffffffffffffffffffffffffffffff166112ad6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612f58565b60405180910390fd5b6004544310611347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133e90612e98565b60405180910390fd5b61135c816004546121e990919063ffffffff16565b60038190555061136a6115d8565b50565b6113756121e1565b73ffffffffffffffffffffffffffffffffffffffff166113936113f8565b73ffffffffffffffffffffffffffffffffffffffff16146113e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e090612f58565b60405180910390fd5b43600381905550565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b61142f6121e1565b73ffffffffffffffffffffffffffffffffffffffff1661144d6113f8565b73ffffffffffffffffffffffffffffffffffffffff16146114a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149a90612f58565b60405180910390fd5b60045443106114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de90612e98565b60405180910390fd5b808210611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090612eb8565b60405180910390fd5b81431061156b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156290612f38565b60405180910390fd5b81600481905550806003819055506004546005819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0682826040516115b3929190613053565b60405180910390a15050565b600a60009054906101000a900460ff1681565b60055481565b6115e06121e1565b73ffffffffffffffffffffffffffffffffffffffff166115fe6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90612f58565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116b19190612da0565b60206040518083038186803b1580156116c957600080fd5b505afa1580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190612a71565b905061171d61170e612187565b8261235f90919063ffffffff16565b60068190555050565b61172e6121e1565b73ffffffffffffffffffffffffffffffffffffffff1661174c6113f8565b73ffffffffffffffffffffffffffffffffffffffff16146117a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179990612f58565b60405180910390fd5b60045443106117e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117dd90612e98565b60405180910390fd5b60006117f0612187565b90508160048190555061180e816004546121e990919063ffffffff16565b6003819055506004546005819055505050565b60026001541415611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185e90613018565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506118ba6121ff565b60008160000154111561192457600061190c82600101546118fe6009546118f0600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b905060008111156119225761192133826123fb565b5b505b60008211156119bc576119448282600001546121e990919063ffffffff16565b816000018190555061199b333084600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661261b909392919063ffffffff16565b60008160020154146119b15780600201546119b3565b425b81600201819055505b6119e96009546119db600254846000015461234990919063ffffffff16565b61235f90919063ffffffff16565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051611a379190613038565b60405180910390a2506001808190555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b611a7e6121e1565b73ffffffffffffffffffffffffffffffffffffffff16611a9c6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae990612f58565b60405180910390fd5b611afb82611726565b611b0481611287565b5050565b60026001541415611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590613018565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008260000181905550600082600101819055506000811115611cd2576007548260020154611bd19190613100565b421015611c84576000611c03612710611bf56008548561234990919063ffffffff16565b61235f90919063ffffffff16565b9050611c74600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b8082611c809190613352565b9150505b611cd13382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b5b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051611d189190613038565b60405180910390a2505060018081905550565b611d336121e1565b73ffffffffffffffffffffffffffffffffffffffff16611d516113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9e90612f58565b60405180910390fd5b8060078190555050565b60085481565b611dbf6121e1565b73ffffffffffffffffffffffffffffffffffffffff16611ddd6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2a90612f58565b60405180910390fd5b611e803082600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b50565b611e8b6121e1565b73ffffffffffffffffffffffffffffffffffffffff16611ea96113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef690612f58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6690612e58565b60405180910390fd5b611f7881612557565b50565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161201c9190612da0565b60206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c9190612a71565b905060055443118015612080575060008114155b1561213a576000612093600554436126a4565b905060006120ac6006548361234990919063ffffffff16565b905060006120eb6120da856120cc6009548661234990919063ffffffff16565b61235f90919063ffffffff16565b6002546121e990919063ffffffff16565b905061212e8560010154612120600954612112858a6000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b95505050505050612182565b61217d826001015461216f600954612161600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b925050505b919050565b60006121a06004546003546121cb90919063ffffffff16565b905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081836121d99190613352565b905092915050565b600033905090565b600081836121f79190613100565b905092915050565b600554431161220d57612347565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161226a9190612da0565b60206040518083038186803b15801561228257600080fd5b505afa158015612296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ba9190612a71565b905060008114156122d2574360058190555050612347565b60006122e0600554436126a4565b905060006122f96006548361234990919063ffffffff16565b9050612336612325846123176009548561234990919063ffffffff16565b61235f90919063ffffffff16565b6002546121e990919063ffffffff16565b600281905550436005819055505050505b565b6000818361235791906132f8565b905092915050565b6000818361236d9190613156565b905092915050565b6123f68363a9059cbb60e01b8484604051602401612394929190612df2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126f9565b505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124589190612da0565b60206040518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190612a71565b905080821115612504576124ff8382600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b612552565b6125518383600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61269e846323b872dd60e01b85858560405160240161263c93929190612dbb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126f9565b50505050565b600060035482116126c9576126c283836121cb90919063ffffffff16565b90506126f3565b60035483106126db57600090506126f3565b6126f0836003546121cb90919063ffffffff16565b90505b92915050565b600061275b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127c09092919063ffffffff16565b90506000815111156127bb578080602001905181019061277b9190612a1f565b6127ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b190612ff8565b60405180910390fd5b5b505050565b60606127cf84846000856127d8565b90509392505050565b60608247101561281d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281490612ed8565b60405180910390fd5b612826856128ec565b612865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285c90612fb8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161288e9190612d89565b60006040518083038185875af1925050503d80600081146128cb576040519150601f19603f3d011682016040523d82523d6000602084013e6128d0565b606091505b50915091506128e08282866128ff565b92505050949350505050565b600080823b905060008111915050919050565b6060831561290f5782905061295f565b6000835111156129225782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129569190612e36565b60405180910390fd5b9392505050565b600081359050612975816137d3565b92915050565b60008151905061298a816137ea565b92915050565b60008135905061299f81613801565b92915050565b6000815190506129b481613801565b92915050565b6000602082840312156129cc57600080fd5b60006129da84828501612966565b91505092915050565b600080604083850312156129f657600080fd5b6000612a0485828601612966565b9250506020612a1585828601612990565b9150509250929050565b600060208284031215612a3157600080fd5b6000612a3f8482850161297b565b91505092915050565b600060208284031215612a5a57600080fd5b6000612a6884828501612990565b91505092915050565b600060208284031215612a8357600080fd5b6000612a91848285016129a5565b91505092915050565b60008060408385031215612aad57600080fd5b6000612abb85828601612990565b9250506020612acc85828601612990565b9150509250929050565b612adf81613386565b82525050565b6000612af0826130ce565b612afa81856130e4565b9350612b0a8185602086016133ff565b80840191505092915050565b612b1f816133db565b82525050565b6000612b30826130d9565b612b3a81856130ef565b9350612b4a8185602086016133ff565b612b5381613490565b840191505092915050565b6000612b6b6026836130ef565b9150612b76826134ae565b604082019050919050565b6000612b8e601c836130ef565b9150612b99826134fd565b602082019050919050565b6000612bb16010836130ef565b9150612bbc82613526565b602082019050919050565b6000612bd4602e836130ef565b9150612bdf8261354f565b604082019050919050565b6000612bf76026836130ef565b9150612c028261359e565b604082019050919050565b6000612c1a6019836130ef565b9150612c25826135ed565b602082019050919050565b6000612c3d6015836130ef565b9150612c4882613616565b602082019050919050565b6000612c606030836130ef565b9150612c6b8261363f565b604082019050919050565b6000612c836020836130ef565b9150612c8e8261368e565b602082019050919050565b6000612ca66016836130ef565b9150612cb1826136b7565b602082019050919050565b6000612cc9601b836130ef565b9150612cd4826136e0565b602082019050919050565b6000612cec601d836130ef565b9150612cf782613709565b602082019050919050565b6000612d0f6016836130ef565b9150612d1a82613732565b602082019050919050565b6000612d32602a836130ef565b9150612d3d8261375b565b604082019050919050565b6000612d55601f836130ef565b9150612d60826137aa565b602082019050919050565b612d74816133c4565b82525050565b612d83816133ce565b82525050565b6000612d958284612ae5565b915081905092915050565b6000602082019050612db56000830184612ad6565b92915050565b6000606082019050612dd06000830186612ad6565b612ddd6020830185612ad6565b612dea6040830184612d6b565b949350505050565b6000604082019050612e076000830185612ad6565b612e146020830184612d6b565b9392505050565b6000602082019050612e306000830184612b16565b92915050565b60006020820190508181036000830152612e508184612b25565b905092915050565b60006020820190508181036000830152612e7181612b5e565b9050919050565b60006020820190508181036000830152612e9181612b81565b9050919050565b60006020820190508181036000830152612eb181612ba4565b9050919050565b60006020820190508181036000830152612ed181612bc7565b9050919050565b60006020820190508181036000830152612ef181612bea565b9050919050565b60006020820190508181036000830152612f1181612c0d565b9050919050565b60006020820190508181036000830152612f3181612c30565b9050919050565b60006020820190508181036000830152612f5181612c53565b9050919050565b60006020820190508181036000830152612f7181612c76565b9050919050565b60006020820190508181036000830152612f9181612c99565b9050919050565b60006020820190508181036000830152612fb181612cbc565b9050919050565b60006020820190508181036000830152612fd181612cdf565b9050919050565b60006020820190508181036000830152612ff181612d02565b9050919050565b6000602082019050818103600083015261301181612d25565b9050919050565b6000602082019050818103600083015261303181612d48565b9050919050565b600060208201905061304d6000830184612d6b565b92915050565b60006040820190506130686000830185612d6b565b6130756020830184612d6b565b9392505050565b60006060820190506130916000830186612d6b565b61309e6020830185612d6b565b6130ab6040830184612d6b565b949350505050565b60006020820190506130c86000830184612d7a565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061310b826133c4565b9150613116836133c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561314b5761314a613432565b5b828201905092915050565b6000613161826133c4565b915061316c836133c4565b92508261317c5761317b613461565b5b828204905092915050565b6000808291508390505b60018511156131d1578086048111156131ad576131ac613432565b5b60018516156131bc5780820291505b80810290506131ca856134a1565b9450613191565b94509492505050565b60006131e5826133c4565b91506131f0836133c4565b925061321d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613225565b905092915050565b60008261323557600190506132f1565b8161324357600090506132f1565b8160018114613259576002811461326357613292565b60019150506132f1565b60ff84111561327557613274613432565b5b8360020a91508482111561328c5761328b613432565b5b506132f1565b5060208310610133831016604e8410600b84101617156132c75782820a9050838111156132c2576132c1613432565b5b6132f1565b6132d48484846001613187565b925090508184048111156132eb576132ea613432565b5b81810290505b9392505050565b6000613303826133c4565b915061330e836133c4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561334757613346613432565b5b828202905092915050565b600061335d826133c4565b9150613368836133c4565b92508282101561337b5761337a613432565b5b828203905092915050565b6000613391826133a4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006133e6826133ed565b9050919050565b60006133f8826133a4565b9050919050565b60005b8381101561341d578082015181840152602081019050613402565b8381111561342c576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000600082015250565b7f506f6f6c20686173207374617274656400000000000000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160008201527f6e206e657720656e64426c6f636b000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000600082015250565b7f4572726f723a20496e76616c696420616d6f756e740000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d7573742062652068696768657220746860008201527f616e2063757272656e7420626c6f636b00000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742062652072657761726420746f6b656e00000000000000000000600082015250565b7f416d6f756e7420746f20776974686472617720746f6f20686967680000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43616e6e6f74206265207374616b656420746f6b656e00000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6137dc81613386565b81146137e757600080fd5b50565b6137f381613398565b81146137fe57600080fd5b50565b61380a816133c4565b811461381557600080fd5b5056fea264697066735822122059c71e398047aafa070f1eff19ac49dea4484d5bb654ff5ebe47a68a87c85ff964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638f66291511610125578063d3a8615c116100ad578063ea9041e41161007c578063ea9041e41461055b578063f2fde38b14610577578063f40f0f5214610593578063f520e7e5146105c3578063f7c618c1146105e15761021c565b8063d3a8615c146104fb578063db2e21bc14610517578063e1b2addc14610521578063e941fa781461053d5761021c565b8063a2ba0bc7116100f4578063a2ba0bc71461047d578063b3f02d3814610487578063b6b55f25146104a3578063cc7a262e146104bf578063ccd34cd5146104dd5761021c565b80638f662915146104075780639513997f146104255780639bdcecd114610441578063a218141b1461045f5761021c565b80634e71d92d116101a8578063715018a611610177578063715018a61461039b5780637bfaa40c146103a557806380dc0672146103c15780638ae39cac146103cb5780638da5cb5b146103e95761021c565b80634e71d92d14610339578063576e093b146103435780635bb06ead1461035f5780636aa662b51461037d5761021c565b80632e1a7d4d116101ef5780632e1a7d4d146102a95780633279beab146102c55780633f138d4b146102e157806341275358146102fd57806348cd4cb11461031b5761021c565b806301f8a97614610221578063083c63231461023d57806310f8097b1461025b5780631959a00214610277575b600080fd5b61023b60048036038101906102369190612a48565b6105ff565b005b610245610700565b6040516102529190613038565b60405180910390f35b61027560048036038101906102709190612a48565b610706565b005b610291600480360381019061028c91906129ba565b6107a0565b6040516102a09392919061307c565b60405180910390f35b6102c360048036038101906102be9190612a48565b6107ca565b005b6102df60048036038101906102da9190612a48565b610b2e565b005b6102fb60048036038101906102f691906129e3565b610bfa565b005b610305610e00565b6040516103129190612da0565b60405180910390f35b610323610e26565b6040516103309190613038565b60405180910390f35b610341610e2c565b005b61035d600480360381019061035891906129ba565b610fbc565b005b6103676111bf565b6040516103749190613038565b60405180910390f35b6103856111f9565b6040516103929190613038565b60405180910390f35b6103a36111ff565b005b6103bf60048036038101906103ba9190612a48565b611287565b005b6103c961136d565b005b6103d36113f2565b6040516103e09190613038565b60405180910390f35b6103f16113f8565b6040516103fe9190612da0565b60405180910390f35b61040f611421565b60405161041c9190613038565b60405180910390f35b61043f600480360381019061043a9190612a9a565b611427565b005b6104496115bf565b60405161045691906130b3565b60405180910390f35b6104676115d2565b6040516104749190613038565b60405180910390f35b6104856115d8565b005b6104a1600480360381019061049c9190612a48565b611726565b005b6104bd60048036038101906104b89190612a48565b611821565b005b6104c7611a4a565b6040516104d49190612e1b565b60405180910390f35b6104e5611a70565b6040516104f29190613038565b60405180910390f35b61051560048036038101906105109190612a9a565b611a76565b005b61051f611b08565b005b61053b60048036038101906105369190612a48565b611d2b565b005b610545611db1565b6040516105529190613038565b60405180910390f35b61057560048036038101906105709190612a48565b611db7565b005b610591600480360381019061058c91906129ba565b611e83565b005b6105ad60048036038101906105a891906129ba565b611f7b565b6040516105ba9190613038565b60405180910390f35b6105cb612187565b6040516105d89190613038565b60405180910390f35b6105e96121a5565b6040516105f69190612e1b565b60405180910390f35b6106076121e1565b73ffffffffffffffffffffffffffffffffffffffff166106256113f8565b73ffffffffffffffffffffffffffffffffffffffff161461067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067290612f58565b60405180910390fd5b60045443106106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690612e98565b60405180910390fd5b806006819055507f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df816040516106f59190613038565b60405180910390a150565b60035481565b61070e6121e1565b73ffffffffffffffffffffffffffffffffffffffff1661072c6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990612f58565b60405180910390fd5b61079d61079882436121e990919063ffffffff16565b611726565b50565b600d6020528060005260406000206000915090508060000154908060010154908060020154905083565b60026001541415610810576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080790613018565b60405180910390fd5b60026001819055506000811161085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290612f18565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816000015410156108e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dc90612f98565b60405180910390fd5b6108ed6121ff565b60006109328260010154610924600954610916600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b905061094b8383600001546121cb90919063ffffffff16565b82600001819055506000839050600754836002015461096a9190613100565b421015610a1d57600061099c61271061098e6008548561234990919063ffffffff16565b61235f90919063ffffffff16565b9050610a0d600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b8082610a199190613352565b9150505b610a6a3382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b6000836002015414610a80578260020154610a82565b425b83600201819055506000821115610a9e57610a9d33836123fb565b5b610acb600954610abd600254866000015461234990919063ffffffff16565b61235f90919063ffffffff16565b83600101819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436485604051610b199190613038565b60405180910390a25050506001808190555050565b610b366121e1565b73ffffffffffffffffffffffffffffffffffffffff16610b546113f8565b73ffffffffffffffffffffffffffffffffffffffff1614610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190612f58565b60405180910390fd5b610bf73382600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b50565b610c026121e1565b73ffffffffffffffffffffffffffffffffffffffff16610c206113f8565b73ffffffffffffffffffffffffffffffffffffffff1614610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d90612f58565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfe90612fd8565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8f90612f78565b60405180910390fd5b610dc333828473ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b7f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051610df4929190612df2565b60405180910390a15050565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60026001541415610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6990613018565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ec56121ff565b600081600001541115610f7d576000610f178260010154610f09600954610efb600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b90506000811115610f7b57610f2c33826123fb565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610f729190613038565b60405180910390a25b505b610faa600954610f9c600254846000015461234990919063ffffffff16565b61235f90919063ffffffff16565b81600101819055505060018081905550565b610fc46121e1565b73ffffffffffffffffffffffffffffffffffffffff16610fe26113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f90612f58565b60405180910390fd5b600354431161107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107390612e78565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110d99190612da0565b60206040518083038186803b1580156110f157600080fd5b505afa158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111299190612a71565b90506000811161116e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116590612ef8565b60405180910390fd5b6111bb8282600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b5050565b60006111f4600a60009054906101000a900460ff1660ff16600a6111e391906131da565b60065461235f90919063ffffffff16565b905090565b60075481565b6112076121e1565b73ffffffffffffffffffffffffffffffffffffffff166112256113f8565b73ffffffffffffffffffffffffffffffffffffffff161461127b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127290612f58565b60405180910390fd5b6112856000612557565b565b61128f6121e1565b73ffffffffffffffffffffffffffffffffffffffff166112ad6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612f58565b60405180910390fd5b6004544310611347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133e90612e98565b60405180910390fd5b61135c816004546121e990919063ffffffff16565b60038190555061136a6115d8565b50565b6113756121e1565b73ffffffffffffffffffffffffffffffffffffffff166113936113f8565b73ffffffffffffffffffffffffffffffffffffffff16146113e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e090612f58565b60405180910390fd5b43600381905550565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b61142f6121e1565b73ffffffffffffffffffffffffffffffffffffffff1661144d6113f8565b73ffffffffffffffffffffffffffffffffffffffff16146114a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149a90612f58565b60405180910390fd5b60045443106114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de90612e98565b60405180910390fd5b808210611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090612eb8565b60405180910390fd5b81431061156b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156290612f38565b60405180910390fd5b81600481905550806003819055506004546005819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0682826040516115b3929190613053565b60405180910390a15050565b600a60009054906101000a900460ff1681565b60055481565b6115e06121e1565b73ffffffffffffffffffffffffffffffffffffffff166115fe6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90612f58565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116b19190612da0565b60206040518083038186803b1580156116c957600080fd5b505afa1580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190612a71565b905061171d61170e612187565b8261235f90919063ffffffff16565b60068190555050565b61172e6121e1565b73ffffffffffffffffffffffffffffffffffffffff1661174c6113f8565b73ffffffffffffffffffffffffffffffffffffffff16146117a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179990612f58565b60405180910390fd5b60045443106117e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117dd90612e98565b60405180910390fd5b60006117f0612187565b90508160048190555061180e816004546121e990919063ffffffff16565b6003819055506004546005819055505050565b60026001541415611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185e90613018565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506118ba6121ff565b60008160000154111561192457600061190c82600101546118fe6009546118f0600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b905060008111156119225761192133826123fb565b5b505b60008211156119bc576119448282600001546121e990919063ffffffff16565b816000018190555061199b333084600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661261b909392919063ffffffff16565b60008160020154146119b15780600201546119b3565b425b81600201819055505b6119e96009546119db600254846000015461234990919063ffffffff16565b61235f90919063ffffffff16565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051611a379190613038565b60405180910390a2506001808190555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b611a7e6121e1565b73ffffffffffffffffffffffffffffffffffffffff16611a9c6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae990612f58565b60405180910390fd5b611afb82611726565b611b0481611287565b5050565b60026001541415611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590613018565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008260000181905550600082600101819055506000811115611cd2576007548260020154611bd19190613100565b421015611c84576000611c03612710611bf56008548561234990919063ffffffff16565b61235f90919063ffffffff16565b9050611c74600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b8082611c809190613352565b9150505b611cd13382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b5b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051611d189190613038565b60405180910390a2505060018081905550565b611d336121e1565b73ffffffffffffffffffffffffffffffffffffffff16611d516113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9e90612f58565b60405180910390fd5b8060078190555050565b60085481565b611dbf6121e1565b73ffffffffffffffffffffffffffffffffffffffff16611ddd6113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2a90612f58565b60405180910390fd5b611e803082600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b50565b611e8b6121e1565b73ffffffffffffffffffffffffffffffffffffffff16611ea96113f8565b73ffffffffffffffffffffffffffffffffffffffff1614611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef690612f58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6690612e58565b60405180910390fd5b611f7881612557565b50565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161201c9190612da0565b60206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c9190612a71565b905060055443118015612080575060008114155b1561213a576000612093600554436126a4565b905060006120ac6006548361234990919063ffffffff16565b905060006120eb6120da856120cc6009548661234990919063ffffffff16565b61235f90919063ffffffff16565b6002546121e990919063ffffffff16565b905061212e8560010154612120600954612112858a6000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b95505050505050612182565b61217d826001015461216f600954612161600254876000015461234990919063ffffffff16565b61235f90919063ffffffff16565b6121cb90919063ffffffff16565b925050505b919050565b60006121a06004546003546121cb90919063ffffffff16565b905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081836121d99190613352565b905092915050565b600033905090565b600081836121f79190613100565b905092915050565b600554431161220d57612347565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161226a9190612da0565b60206040518083038186803b15801561228257600080fd5b505afa158015612296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ba9190612a71565b905060008114156122d2574360058190555050612347565b60006122e0600554436126a4565b905060006122f96006548361234990919063ffffffff16565b9050612336612325846123176009548561234990919063ffffffff16565b61235f90919063ffffffff16565b6002546121e990919063ffffffff16565b600281905550436005819055505050505b565b6000818361235791906132f8565b905092915050565b6000818361236d9190613156565b905092915050565b6123f68363a9059cbb60e01b8484604051602401612394929190612df2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126f9565b505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124589190612da0565b60206040518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190612a71565b905080821115612504576124ff8382600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b612552565b6125518383600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123759092919063ffffffff16565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61269e846323b872dd60e01b85858560405160240161263c93929190612dbb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126f9565b50505050565b600060035482116126c9576126c283836121cb90919063ffffffff16565b90506126f3565b60035483106126db57600090506126f3565b6126f0836003546121cb90919063ffffffff16565b90505b92915050565b600061275b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127c09092919063ffffffff16565b90506000815111156127bb578080602001905181019061277b9190612a1f565b6127ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b190612ff8565b60405180910390fd5b5b505050565b60606127cf84846000856127d8565b90509392505050565b60608247101561281d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281490612ed8565b60405180910390fd5b612826856128ec565b612865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285c90612fb8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161288e9190612d89565b60006040518083038185875af1925050503d80600081146128cb576040519150601f19603f3d011682016040523d82523d6000602084013e6128d0565b606091505b50915091506128e08282866128ff565b92505050949350505050565b600080823b905060008111915050919050565b6060831561290f5782905061295f565b6000835111156129225782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129569190612e36565b60405180910390fd5b9392505050565b600081359050612975816137d3565b92915050565b60008151905061298a816137ea565b92915050565b60008135905061299f81613801565b92915050565b6000815190506129b481613801565b92915050565b6000602082840312156129cc57600080fd5b60006129da84828501612966565b91505092915050565b600080604083850312156129f657600080fd5b6000612a0485828601612966565b9250506020612a1585828601612990565b9150509250929050565b600060208284031215612a3157600080fd5b6000612a3f8482850161297b565b91505092915050565b600060208284031215612a5a57600080fd5b6000612a6884828501612990565b91505092915050565b600060208284031215612a8357600080fd5b6000612a91848285016129a5565b91505092915050565b60008060408385031215612aad57600080fd5b6000612abb85828601612990565b9250506020612acc85828601612990565b9150509250929050565b612adf81613386565b82525050565b6000612af0826130ce565b612afa81856130e4565b9350612b0a8185602086016133ff565b80840191505092915050565b612b1f816133db565b82525050565b6000612b30826130d9565b612b3a81856130ef565b9350612b4a8185602086016133ff565b612b5381613490565b840191505092915050565b6000612b6b6026836130ef565b9150612b76826134ae565b604082019050919050565b6000612b8e601c836130ef565b9150612b99826134fd565b602082019050919050565b6000612bb16010836130ef565b9150612bbc82613526565b602082019050919050565b6000612bd4602e836130ef565b9150612bdf8261354f565b604082019050919050565b6000612bf76026836130ef565b9150612c028261359e565b604082019050919050565b6000612c1a6019836130ef565b9150612c25826135ed565b602082019050919050565b6000612c3d6015836130ef565b9150612c4882613616565b602082019050919050565b6000612c606030836130ef565b9150612c6b8261363f565b604082019050919050565b6000612c836020836130ef565b9150612c8e8261368e565b602082019050919050565b6000612ca66016836130ef565b9150612cb1826136b7565b602082019050919050565b6000612cc9601b836130ef565b9150612cd4826136e0565b602082019050919050565b6000612cec601d836130ef565b9150612cf782613709565b602082019050919050565b6000612d0f6016836130ef565b9150612d1a82613732565b602082019050919050565b6000612d32602a836130ef565b9150612d3d8261375b565b604082019050919050565b6000612d55601f836130ef565b9150612d60826137aa565b602082019050919050565b612d74816133c4565b82525050565b612d83816133ce565b82525050565b6000612d958284612ae5565b915081905092915050565b6000602082019050612db56000830184612ad6565b92915050565b6000606082019050612dd06000830186612ad6565b612ddd6020830185612ad6565b612dea6040830184612d6b565b949350505050565b6000604082019050612e076000830185612ad6565b612e146020830184612d6b565b9392505050565b6000602082019050612e306000830184612b16565b92915050565b60006020820190508181036000830152612e508184612b25565b905092915050565b60006020820190508181036000830152612e7181612b5e565b9050919050565b60006020820190508181036000830152612e9181612b81565b9050919050565b60006020820190508181036000830152612eb181612ba4565b9050919050565b60006020820190508181036000830152612ed181612bc7565b9050919050565b60006020820190508181036000830152612ef181612bea565b9050919050565b60006020820190508181036000830152612f1181612c0d565b9050919050565b60006020820190508181036000830152612f3181612c30565b9050919050565b60006020820190508181036000830152612f5181612c53565b9050919050565b60006020820190508181036000830152612f7181612c76565b9050919050565b60006020820190508181036000830152612f9181612c99565b9050919050565b60006020820190508181036000830152612fb181612cbc565b9050919050565b60006020820190508181036000830152612fd181612cdf565b9050919050565b60006020820190508181036000830152612ff181612d02565b9050919050565b6000602082019050818103600083015261301181612d25565b9050919050565b6000602082019050818103600083015261303181612d48565b9050919050565b600060208201905061304d6000830184612d6b565b92915050565b60006040820190506130686000830185612d6b565b6130756020830184612d6b565b9392505050565b60006060820190506130916000830186612d6b565b61309e6020830185612d6b565b6130ab6040830184612d6b565b949350505050565b60006020820190506130c86000830184612d7a565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061310b826133c4565b9150613116836133c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561314b5761314a613432565b5b828201905092915050565b6000613161826133c4565b915061316c836133c4565b92508261317c5761317b613461565b5b828204905092915050565b6000808291508390505b60018511156131d1578086048111156131ad576131ac613432565b5b60018516156131bc5780820291505b80810290506131ca856134a1565b9450613191565b94509492505050565b60006131e5826133c4565b91506131f0836133c4565b925061321d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613225565b905092915050565b60008261323557600190506132f1565b8161324357600090506132f1565b8160018114613259576002811461326357613292565b60019150506132f1565b60ff84111561327557613274613432565b5b8360020a91508482111561328c5761328b613432565b5b506132f1565b5060208310610133831016604e8410600b84101617156132c75782820a9050838111156132c2576132c1613432565b5b6132f1565b6132d48484846001613187565b925090508184048111156132eb576132ea613432565b5b81810290505b9392505050565b6000613303826133c4565b915061330e836133c4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561334757613346613432565b5b828202905092915050565b600061335d826133c4565b9150613368836133c4565b92508282101561337b5761337a613432565b5b828203905092915050565b6000613391826133a4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006133e6826133ed565b9050919050565b60006133f8826133a4565b9050919050565b60005b8381101561341d578082015181840152602081019050613402565b8381111561342c576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000600082015250565b7f506f6f6c20686173207374617274656400000000000000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160008201527f6e206e657720656e64426c6f636b000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000600082015250565b7f4572726f723a20496e76616c696420616d6f756e740000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d7573742062652068696768657220746860008201527f616e2063757272656e7420626c6f636b00000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742062652072657761726420746f6b656e00000000000000000000600082015250565b7f416d6f756e7420746f20776974686472617720746f6f20686967680000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43616e6e6f74206265207374616b656420746f6b656e00000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6137dc81613386565b81146137e757600080fd5b50565b6137f381613398565b81146137fe57600080fd5b50565b61380a816133c4565b811461381557600080fd5b5056fea264697066735822122059c71e398047aafa070f1eff19ac49dea4484d5bb654ff5ebe47a68a87c85ff964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/Stake.sol:Stake",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 497,
        "contract": "contracts/Stake.sol:Stake",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2351,
        "contract": "contracts/Stake.sol:Stake",
        "label": "accTokenPerShare",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2353,
        "contract": "contracts/Stake.sol:Stake",
        "label": "endBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2355,
        "contract": "contracts/Stake.sol:Stake",
        "label": "startBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2357,
        "contract": "contracts/Stake.sol:Stake",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2359,
        "contract": "contracts/Stake.sol:Stake",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2361,
        "contract": "contracts/Stake.sol:Stake",
        "label": "lockUpDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2363,
        "contract": "contracts/Stake.sol:Stake",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2365,
        "contract": "contracts/Stake.sol:Stake",
        "label": "PRECISION_FACTOR",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2367,
        "contract": "contracts/Stake.sol:Stake",
        "label": "rewardTokenDecimals",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 2369,
        "contract": "contracts/Stake.sol:Stake",
        "label": "feeAddress",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2372,
        "contract": "contracts/Stake.sol:Stake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1150"
      },
      {
        "astId": 2375,
        "contract": "contracts/Stake.sol:Stake",
        "label": "stakedToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1150"
      },
      {
        "astId": 2380,
        "contract": "contracts/Stake.sol:Stake",
        "label": "userInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(UserInfo)2387_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1150": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2387_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Stake.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2387_storage"
      },
      "t_struct(UserInfo)2387_storage": {
        "encoding": "inplace",
        "label": "struct Stake.UserInfo",
        "members": [
          {
            "astId": 2382,
            "contract": "contracts/Stake.sol:Stake",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2384,
            "contract": "contracts/Stake.sol:Stake",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2386,
            "contract": "contracts/Stake.sol:Stake",
            "label": "firstDeposit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}