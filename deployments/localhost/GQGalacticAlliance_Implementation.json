{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewEndBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "NewLockUpDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardTokenFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfAccTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfPrecisionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        }
      ],
      "name": "poolCalcRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "name": "poolSetStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetStartAndDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "poolStartIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        }
      ],
      "name": "rewarPerBlockUI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "setLockUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRemains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4f561c128e3b6514f956c36ffb38b61abe6b177de0287cf8f6f304258c08988",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4196232",
    "logsBloom": "0x
    "blockHash": "0xbb4819ad60f641b9913ecb696415fa6596df18619c63deebf2cb58d571cf9687",
    "transactionHash": "0xb4f561c128e3b6514f956c36ffb38b61abe6b177de0287cf8f6f304258c08988",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "4196232",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6890be6bf3a99506c44764a076454f77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"NewLockUpDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardTokenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfAccTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfPrecisionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"}],\"name\":\"poolCalcRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"poolSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetStartAndDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"poolStartIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"}],\"name\":\"rewarPerBlockUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"setLockUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRemains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GQGalacticAlliance.sol\":\"GQGalacticAlliance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/GQGalacticAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract GQGalacticAlliance is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuard\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint8 constant TOKEN1 = 1;\\n    uint8 constant TOKEN2 = 2;\\n\\n    // Is contract initialized\\n    bool public isInitialized;\\n\\n    // The block number when REWARD distribution ends.\\n    uint256 public endBlock;\\n\\n    // The block number when REWARD distribution starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastUpdateBlock;\\n\\n    // Lockup duration for deposit\\n    uint256 public lockUpDuration;\\n\\n    // Withdraw fee in BP\\n    uint256 public withdrawFee;\\n\\n    // Withdraw fee destiny address\\n    address public feeAddress;\\n\\n    // The staked token\\n    IERC20Upgradeable public stakedToken;\\n\\n    // Accrued token per share\\n    mapping(uint8 => uint256) public mapOfAccTokenPerShare;\\n\\n    // REWARD tokens created per block.\\n    mapping(uint8 => uint256) mapOfRewardPerBlock;\\n\\n    // The precision factor for reward tokens\\n    mapping(uint8 => uint256) public mapOfPrecisionFactor;\\n\\n    // decimals places of the reward token\\n    mapping(uint8 => uint8) public mapOfRewardTokenDecimals;\\n\\n    // The reward token\\n    mapping(uint8 => address) public mapOfRewardTokens;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // Staked tokens the user has provided\\n        uint256 rewardDebt1; // Reward debt1\\n        uint256 rewardDebt2; // Reward debt2\\n        uint256 firstDeposit; // First deposit before withdraw\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewEndBlock(uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event RewardsStop(uint256 blockNumber);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event NewLockUpDuration(uint256 lockUpDuration);\\n\\n    constructor() initializer {}\\n\\n    /*\\n     * @notice Constructor of the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken1: reward token1 address\\n     * @param _rewardToken2: reward token2 address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _endBlock: end block\\n     * @param _lockUpDuration: duration for the deposit\\n     * @param _withdrawFee: fee for early withdraw\\n     * @param _feeAddress: address where fees for early withdraw will be send\\n     */\\n    function initialize(\\n        IERC20Upgradeable _stakedToken,\\n        address _rewardToken1,\\n        address _rewardToken2,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _lockUpDuration,\\n        uint256 _withdrawFee,\\n        address _feeAddress\\n    ) public initializer {\\n        stakedToken = _stakedToken;\\n        mapOfRewardTokens[TOKEN1] = _rewardToken1;\\n        mapOfRewardTokens[TOKEN2] = _rewardToken2;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        lockUpDuration = _lockUpDuration;\\n        withdrawFee = _withdrawFee;\\n        feeAddress = _feeAddress;\\n\\n        mapOfRewardTokenDecimals[TOKEN1] = IERC20MetadataUpgradeable(\\n            mapOfRewardTokens[TOKEN1]\\n        ).decimals();\\n        mapOfRewardTokenDecimals[TOKEN2] = IERC20MetadataUpgradeable(\\n            mapOfRewardTokens[TOKEN2]\\n        ).decimals();\\n        require(\\n            mapOfRewardTokenDecimals[TOKEN1] < 30 &&\\n                mapOfRewardTokenDecimals[TOKEN2] < 30,\\n            \\\"Must be inferior to 30\\\"\\n        );\\n\\n        mapOfPrecisionFactor[TOKEN1] = uint256(\\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN1])))\\n        );\\n        mapOfPrecisionFactor[TOKEN2] = uint256(\\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN2])))\\n        );\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        isInitialized = true;\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to deposit (in stakedToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingToken1 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN1])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt1);\\n            if (pendingToken1 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN1],\\n                    msg.sender,\\n                    pendingToken1\\n                );\\n            }\\n            uint256 pendingToken2 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN2])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt2);\\n\\n            if (pendingToken2 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN2],\\n                    msg.sender,\\n                    pendingToken2\\n                );\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakedToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.firstDeposit = user.firstDeposit == 0\\n                ? block.timestamp\\n                : user.firstDeposit;\\n        }\\n\\n        user.rewardDebt1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1]);\\n\\n        user.rewardDebt2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2]);\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"Error: Invalid amount\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n        _updatePool();\\n\\n        uint256 pendingToken1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1])\\n            .sub(user.rewardDebt1);\\n        uint256 pendingToken2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2])\\n            .sub(user.rewardDebt2);\\n\\n        user.amount = user.amount.sub(_amount);\\n        uint256 _amountToSend = _amount;\\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\\n                10000\\n            );\\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n            _amountToSend = _amountToSend - _feeAmountToSend;\\n        }\\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\\n        user.firstDeposit = user.firstDeposit == 0\\n            ? block.timestamp\\n            : user.firstDeposit;\\n\\n        if (pendingToken1 > 0) {\\n            _safeTokenTransfer(\\n                mapOfRewardTokens[TOKEN1],\\n                msg.sender,\\n                pendingToken1\\n            );\\n        }\\n        if (pendingToken2 > 0) {\\n            _safeTokenTransfer(\\n                mapOfRewardTokens[TOKEN2],\\n                msg.sender,\\n                pendingToken2\\n            );\\n        }\\n\\n        user.rewardDebt1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1]);\\n        user.rewardDebt2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2]);\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Claim reward tokens\\n     */\\n    function claim() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingToken1 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN1])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt1);\\n\\n            if (pendingToken1 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN1],\\n                    msg.sender,\\n                    pendingToken1\\n                );\\n                emit Claim(msg.sender, pendingToken1);\\n            }\\n            uint256 pendingToken2 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN2])\\n                .div(mapOfPrecisionFactor[TOKEN2])\\n                .sub(user.rewardDebt2);\\n\\n            if (pendingToken2 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN2],\\n                    msg.sender,\\n                    pendingToken2\\n                );\\n                emit Claim(msg.sender, pendingToken2);\\n            }\\n        }\\n\\n        user.rewardDebt1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1]);\\n\\n        user.rewardDebt2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2]);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt1 = 0;\\n        user.rewardDebt2 = 0;\\n\\n        // Avoid users send an amount with 0 tokens\\n        if (_amountToTransfer > 0) {\\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n                uint256 _feeAmountToSend = _amountToTransfer\\n                    .mul(withdrawFee)\\n                    .div(10000);\\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\\n            }\\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != mapOfRewardTokens[TOKEN1] &&\\n                _tokenAddress != mapOfRewardTokens[TOKEN2],\\n            \\\"Cannot be reward token\\\"\\n        );\\n\\n        IERC20Upgradeable(_tokenAddress).safeTransfer(\\n            address(msg.sender),\\n            _tokenAmount\\n        );\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint8 _rewardTokenId, uint256 _rewardPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        mapOfRewardPerBlock[_rewardTokenId] = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"New startBlock must be lower than new endBlock\\\"\\n        );\\n        require(\\n            block.number < _startBlock,\\n            \\\"New startBlock must be higher than current block\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        endBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice Sets the lock up duration\\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\\n     * @dev This function is only callable by owner.\\n     */\\n    function setLockUpDuration(uint256 _lockUpDuration) external onlyOwner {\\n        lockUpDuration = _lockUpDuration;\\n        emit NewLockUpDuration(lockUpDuration);\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool given a block amount\\n     * @param _blocks: block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolStartIn(uint256 _blocks) external onlyOwner {\\n        poolSetStart(block.number.add(_blocks));\\n    }\\n\\n    /*\\n     * @notice Set the duration and start block of the pool\\n     * @param _startBlock: start block\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStartAndDuration(\\n        uint256 _startBlock,\\n        uint256 _durationBlocks\\n    ) external onlyOwner {\\n        poolSetStart(_startBlock);\\n        poolSetDuration(_durationBlocks);\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function withdrawRemains(uint8 _rewardTokenId, address _to)\\n        external\\n        onlyOwner\\n    {\\n        require(block.number > endBlock, \\\"Error: Pool not finished yet\\\");\\n        uint256 tokenBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\\n            .balanceOf(address(this));\\n        require(tokenBal > 0, \\\"Error: No remaining funds\\\");\\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\\n            _to,\\n            tokenBal\\n        );\\n    }\\n\\n    /*\\n     * @notice Deposits the reward token1 funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function depositRewardTokenFunds(uint8 _rewardTokenId, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    /*\\n     * @notice Gets the reward per block for UI\\n     * @return reward per block\\n     */\\n    function rewarPerBlockUI(uint8 _rewardTokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            mapOfRewardPerBlock[_rewardTokenId].div(\\n                10**uint256(mapOfRewardTokenDecimals[_rewardTokenId])\\n            );\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(uint8 _rewardTokenId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 rewardDebt = _rewardTokenId == TOKEN1\\n            ? user.rewardDebt1\\n            : user.rewardDebt2;\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n            uint256 tokenReward = multiplier.mul(\\n                mapOfRewardPerBlock[_rewardTokenId]\\n            );\\n            uint256 adjustedPerShare = mapOfAccTokenPerShare[_rewardTokenId]\\n                .add(\\n                    tokenReward.mul(mapOfPrecisionFactor[_rewardTokenId]).div(\\n                        stakedTokenSupply\\n                    )\\n                );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedPerShare)\\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\\n                    .sub(rewardDebt);\\n        } else {\\n            return\\n                user\\n                    .amount\\n                    .mul(mapOfAccTokenPerShare[_rewardTokenId])\\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\\n                    .sub(rewardDebt);\\n        }\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool\\n     * @param _startBlock: start block\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        uint256 rewardDurationValue = rewardDuration();\\n        startBlock = _startBlock;\\n        endBlock = startBlock.add(rewardDurationValue);\\n        lastUpdateBlock = startBlock;\\n        emit NewStartAndEndBlocks(startBlock, endBlock);\\n    }\\n\\n    /*\\n     * @notice Set the duration of the pool\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        endBlock = startBlock.add(_durationBlocks);\\n        poolCalcRewardPerBlock(TOKEN1);\\n        poolCalcRewardPerBlock(TOKEN2);\\n        emit NewEndBlock(endBlock);\\n    }\\n\\n    /*\\n     * @notice Calculates the rewardPerBlock of the pool\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolCalcRewardPerBlock(uint8 _rewardTokenId) public onlyOwner {\\n        uint256 rewardBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).balanceOf(address(this));\\n        mapOfRewardPerBlock[_rewardTokenId] = rewardBal.div(rewardDuration());\\n    }\\n\\n    /*\\n     * @notice Gets the reward duration\\n     * @return reward duration\\n     */\\n    function rewardDuration() public view returns (uint256) {\\n        return endBlock.sub(startBlock);\\n    }\\n\\n    /*\\n     * @notice SendPending tokens to claimer\\n     * @param pending: amount to claim\\n     */\\n    function _safeTokenTransfer(\\n        address _rewardToken,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 rewardTokenBalance = IERC20Upgradeable(_rewardToken).balanceOf(address(this));\\n        if (_amount > rewardTokenBalance) {\\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, rewardTokenBalance);\\n        } else {\\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastUpdateBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastUpdateBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n        uint256 tokenReward1 = multiplier.mul(mapOfRewardPerBlock[TOKEN1]);\\n        uint256 tokenReward2 = multiplier.mul(mapOfRewardPerBlock[TOKEN2]);\\n        mapOfAccTokenPerShare[TOKEN1] = mapOfAccTokenPerShare[TOKEN1].add(\\n            tokenReward1.mul(mapOfPrecisionFactor[TOKEN1]).div(stakedTokenSupply)\\n        );\\n        mapOfAccTokenPerShare[TOKEN2] = mapOfAccTokenPerShare[TOKEN2].add(\\n            tokenReward2.mul(mapOfPrecisionFactor[TOKEN2]).div(stakedTokenSupply)\\n        );\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     * @return multiplier\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= endBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock.sub(_from);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e4ce76d454989f427e1db25839af6a9970f6ade715af5165ec59feb5b007fb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806383d1c65b11610125578063bfe5f541116100ad578063db2e21bc1161007c578063db2e21bc146105ee578063e1b2addc146105f8578063e941fa7814610614578063f2fde38b14610632578063f520e7e51461064e5761021c565b8063bfe5f54114610568578063c9b5b29d14610584578063cc7a262e146105b4578063d3a8615c146105d25761021c565b8063a218141b116100f4578063a218141b146104b2578063af1664d1146104d0578063b3f02d3814610500578063b6b55f251461051c578063be615335146105385761021c565b806383d1c65b146104405780638da5cb5b1461045c5780639513997f1461047a5780639b4f9193146104965761021c565b806341275358116101a857806363664dc71161017757806363664dc7146103c25780636aa662b5146103f2578063715018a6146104105780637bfaa40c1461041a57806380dc0672146104365761021c565b8063412753581461034c57806348cd4cb11461036a5780634e71d92d146103885780635fed9b13146103925761021c565b806327e644fe116101ef57806327e644fe146102aa5780632bf033ad146102da5780632e1a7d4d146102f6578063392e53cd146103125780633f138d4b146103305761021c565b8063083c6323146102215780630f7064eb1461023f57806310f8097b1461025b5780631959a00214610277575b600080fd5b61022961066c565b6040516102369190614171565b60405180910390f35b61025960048036038101906102549190613b23565b610672565b005b61027560048036038101906102709190613a07565b610756565b005b610291600480360381019061028c91906138c7565b6107f0565b6040516102a194939291906141b5565b60405180910390f35b6102c460048036038101906102bf9190613a95565b610820565b6040516102d19190613e7e565b60405180910390f35b6102f460048036038101906102ef9190613955565b610853565b005b610310600480360381019061030b9190613a07565b610dfa565b005b61031a611326565b6040516103279190613ef9565b60405180910390f35b61034a600480360381019061034591906138f0565b611339565b005b6103546115c9565b6040516103619190613e7e565b60405180910390f35b6103726115ef565b60405161037f9190614171565b60405180910390f35b6103906115f5565b005b6103ac60048036038101906103a79190613a95565b61199b565b6040516103b991906141fa565b60405180910390f35b6103dc60048036038101906103d79190613a95565b6119bb565b6040516103e99190614171565b60405180910390f35b6103fa6119d3565b6040516104079190614171565b60405180910390f35b6104186119d9565b005b610434600480360381019061042f9190613a07565b611a61565b005b61043e611b8c565b005b61045a60048036038101906104559190613a95565b611c11565b005b610464611d8e565b6040516104719190613e7e565b60405180910390f35b610494600480360381019061048f9190613a59565b611db8565b005b6104b060048036038101906104ab9190613b23565b611f50565b005b6104ba612069565b6040516104c79190614171565b60405180910390f35b6104ea60048036038101906104e59190613a95565b61206f565b6040516104f79190614171565b60405180910390f35b61051a60048036038101906105159190613a07565b612087565b005b61053660048036038101906105319190613a07565b6121bf565b005b610552600480360381019061054d9190613ae7565b6125b0565b60405161055f9190614171565b60405180910390f35b610582600480360381019061057d9190613ae7565b612863565b005b61059e60048036038101906105999190613a95565b612a95565b6040516105ab9190614171565b60405180910390f35b6105bc612aff565b6040516105c99190613f14565b60405180910390f35b6105ec60048036038101906105e79190613a59565b612b25565b005b6105f6612bb7565b005b610612600480360381019061060d9190613a07565b612de5565b005b61061c612ea4565b6040516106299190614171565b60405180910390f35b61064c600480360381019061064791906138c7565b612eaa565b005b610656612fa2565b6040516106639190614171565b60405180910390f35b60675481565b61067a612fe3565b73ffffffffffffffffffffffffffffffffffffffff16610698611d8e565b73ffffffffffffffffffffffffffffffffffffffff16146106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590614071565b60405180910390fd5b6107523082607260008660ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b5050565b61075e612fe3565b73ffffffffffffffffffffffffffffffffffffffff1661077c611d8e565b73ffffffffffffffffffffffffffffffffffffffff16146107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c990614071565b60405180910390fd5b6107ed6107e8824361307190919063ffffffff16565b612087565b50565b60736020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60726020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1661087b5760008054906101000a900460ff1615610884565b610883613087565b5b6108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90614031565b60405180910390fd5b60008060019054906101000a900460ff161590508015610913576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b88606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508760726000600160ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660726000600260ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856068819055508460678190555083606a8190555082606b8190555081606c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae357600080fd5b505afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190613abe565b60716000600160ff1660ff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190613abe565b60716000600260ff1660ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60716000600160ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16108015610c9b5750601e60716000600260ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16105b610cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd190614151565b60405180910390fd5b610d1860716000600160ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16601e61309890919063ffffffff16565b600a610d249190614321565b60706000600160ff1660ff16815260200190815260200160002081905550610d8060716000600260ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16601e61309890919063ffffffff16565b600a610d8c9190614321565b60706000600260ff1660ff168152602001908152602001600020819055506068546069819055506001606660006101000a81548160ff0219169083151502179055508015610def5760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b60026065541415610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790614131565b60405180910390fd5b600260658190555060008111610e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8290614011565b60405180910390fd5b6000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001541015610f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0c906140b1565b60405180910390fd5b610f1d6130ae565b6000610f928260010154610f8460706000600160ff1660ff16815260200190815260200160002054610f76606e6000600160ff1660ff16815260200190815260200160002054876000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b905060006110098360020154610ffb60706000600260ff1660ff16815260200190815260200160002054610fed606e6000600260ff1660ff16815260200190815260200160002054886000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b905061102284846000015461309890919063ffffffff16565b83600001819055506000849050606a5484600301546110419190614247565b4210156110f4576000611073612710611065606b548561331390919063ffffffff16565b61332990919063ffffffff16565b90506110e4606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b80826110f09190614499565b9150505b6111413382606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b6000846003015414611157578360030154611159565b425b846003018190555060008311156111b0576111af60726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338561333f565b5b60008211156111ff576111fe60726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338461333f565b5b61125c60706000600160ff1660ff1681526020019081526020016000205461124e606e6000600160ff1660ff16815260200190815260200160002054876000015461331390919063ffffffff16565b61332990919063ffffffff16565b84600101819055506112c160706000600260ff1660ff168152602001908152602001600020546112b3606e6000600260ff1660ff16815260200190815260200160002054876000015461331390919063ffffffff16565b61332990919063ffffffff16565b84600201819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648660405161130f9190614171565b60405180910390a250505050600160658190555050565b606660009054906101000a900460ff1681565b611341612fe3565b73ffffffffffffffffffffffffffffffffffffffff1661135f611d8e565b73ffffffffffffffffffffffffffffffffffffffff16146113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90614071565b60405180910390fd5b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143d906140f1565b60405180910390fd5b60726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611522575060726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b611561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155890614091565b60405180910390fd5b61158c33828473ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b7f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812982826040516115bd929190613ed0565b60405180910390a15050565b606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60685481565b6002606554141561163b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163290614131565b60405180910390fd5b60026065819055506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061168e6130ae565b6000816000015411156118c6576000611710826001015461170260706000600160ff1660ff168152602001908152602001600020546116f4606e6000600160ff1660ff16815260200190815260200160002054876000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b905060008111156117af5761176060726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338361333f565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516117a69190614171565b60405180910390a25b6000611824836002015461181660706000600260ff1660ff16815260200190815260200160002054611808606e6000600260ff1660ff16815260200190815260200160002054886000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b905060008111156118c35761187460726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338361333f565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516118ba9190614171565b60405180910390a25b50505b61192360706000600160ff1660ff16815260200190815260200160002054611915606e6000600160ff1660ff16815260200190815260200160002054846000015461331390919063ffffffff16565b61332990919063ffffffff16565b816001018190555061198860706000600260ff1660ff1681526020019081526020016000205461197a606e6000600260ff1660ff16815260200190815260200160002054846000015461331390919063ffffffff16565b61332990919063ffffffff16565b8160020181905550506001606581905550565b60716020528060005260406000206000915054906101000a900460ff1681565b606e6020528060005260406000206000915090505481565b606a5481565b6119e1612fe3565b73ffffffffffffffffffffffffffffffffffffffff166119ff611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614611a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4c90614071565b60405180910390fd5b611a5f6000613436565b565b611a69612fe3565b73ffffffffffffffffffffffffffffffffffffffff16611a87611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad490614071565b60405180910390fd5b6068544310611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1890613f91565b60405180910390fd5b611b368160685461307190919063ffffffff16565b606781905550611b466001611c11565b611b506002611c11565b7f55baa248360bce74a89304071ca6e882f61d2226c15dde53a4ec1e05af523d92606754604051611b819190614171565b60405180910390a150565b611b94612fe3565b73ffffffffffffffffffffffffffffffffffffffff16611bb2611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614611c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bff90614071565b60405180910390fd5b43606781905550565b611c19612fe3565b73ffffffffffffffffffffffffffffffffffffffff16611c37611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614611c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8490614071565b60405180910390fd5b6000607260008360ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d019190613e7e565b60206040518083038186803b158015611d1957600080fd5b505afa158015611d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d519190613a30565b9050611d6d611d5e612fa2565b8261332990919063ffffffff16565b606f60008460ff1660ff168152602001908152602001600020819055505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611dc0612fe3565b73ffffffffffffffffffffffffffffffffffffffff16611dde611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90614071565b60405180910390fd5b6068544310611e78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6f90613f91565b60405180910390fd5b808210611eba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb190613fb1565b60405180910390fd5b814310611efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef390614051565b60405180910390fd5b81606881905550806067819055506068546069819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce068282604051611f4492919061418c565b60405180910390a15050565b611f58612fe3565b73ffffffffffffffffffffffffffffffffffffffff16611f76611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614611fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc390614071565b60405180910390fd5b6068544310612010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200790613f91565b60405180910390fd5b80606f60008460ff1660ff168152602001908152602001600020819055507f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df8160405161205d9190614171565b60405180910390a15050565b60695481565b60706020528060005260406000206000915090505481565b61208f612fe3565b73ffffffffffffffffffffffffffffffffffffffff166120ad611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614612103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fa90614071565b60405180910390fd5b6068544310612147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213e90613f91565b60405180910390fd5b6000612151612fa2565b90508160688190555061216f8160685461307190919063ffffffff16565b6067819055506068546069819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce066068546067546040516121b392919061418c565b60405180910390a15050565b60026065541415612205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fc90614131565b60405180910390fd5b60026065819055506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506122586130ae565b6000816000015411156123f45760006122da82600101546122cc60706000600160ff1660ff168152602001908152602001600020546122be606e6000600160ff1660ff16815260200190815260200160002054876000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b9050600081111561232b5761232a60726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338361333f565b5b60006123a0836002015461239260706000600160ff1660ff16815260200190815260200160002054612384606e6000600260ff1660ff16815260200190815260200160002054886000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b905060008111156123f1576123f060726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338361333f565b5b50505b600082111561248c5761241482826000015461307190919063ffffffff16565b816000018190555061246b333084606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166134fc909392919063ffffffff16565b6000816003015414612481578060030154612483565b425b81600301819055505b6124e960706000600160ff1660ff168152602001908152602001600020546124db606e6000600160ff1660ff16815260200190815260200160002054846000015461331390919063ffffffff16565b61332990919063ffffffff16565b816001018190555061254e60706000600260ff1660ff16815260200190815260200160002054612540606e6000600260ff1660ff16815260200190815260200160002054846000015461331390919063ffffffff16565b61332990919063ffffffff16565b81600201819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161259c9190614171565b60405180910390a250600160658190555050565b600080607360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160ff168560ff161461260e578160020154612614565b81600101545b90506000606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016126739190613e7e565b60206040518083038186803b15801561268b57600080fd5b505afa15801561269f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c39190613a30565b9050606954431180156126d7575060008114155b156127ea5760006126ea60695443613585565b9050600061271a606f60008a60ff1660ff168152602001908152602001600020548361331390919063ffffffff16565b9050600061278761275f85612751607060008e60ff1660ff168152602001908152602001600020548661331390919063ffffffff16565b61332990919063ffffffff16565b606e60008c60ff1660ff1681526020019081526020016000205461307190919063ffffffff16565b90506127dd856127cf607060008d60ff1660ff168152602001908152602001600020546127c1858b6000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b965050505050505061285d565b61285782612849607060008a60ff1660ff1681526020019081526020016000205461283b606e60008c60ff1660ff16815260200190815260200160002054886000015461331390919063ffffffff16565b61332990919063ffffffff16565b61309890919063ffffffff16565b93505050505b92915050565b61286b612fe3565b73ffffffffffffffffffffffffffffffffffffffff16612889611d8e565b73ffffffffffffffffffffffffffffffffffffffff16146128df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d690614071565b60405180910390fd5b6067544311612923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291a90613f71565b60405180910390fd5b6000607260008460ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129979190613e7e565b60206040518083038186803b1580156129af57600080fd5b505afa1580156129c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e79190613a30565b905060008111612a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2390613ff1565b60405180910390fd5b612a908282607260008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b505050565b6000612af8607160008460ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16600a612ad09190614321565b606f60008560ff1660ff1681526020019081526020016000205461332990919063ffffffff16565b9050919050565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612b2d612fe3565b73ffffffffffffffffffffffffffffffffffffffff16612b4b611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614612ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9890614071565b60405180910390fd5b612baa82612087565b612bb381611a61565b5050565b60026065541415612bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf490614131565b60405180910390fd5b60026065819055506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015490506000826000018190555060008260010181905550600082600201819055506000811115612d8b57606a548260030154612c8a9190614247565b421015612d3d576000612cbc612710612cae606b548561331390919063ffffffff16565b61332990919063ffffffff16565b9050612d2d606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b8082612d399190614499565b9150505b612d8a3382606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b5b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051612dd19190614171565b60405180910390a250506001606581905550565b612ded612fe3565b73ffffffffffffffffffffffffffffffffffffffff16612e0b611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614612e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5890614071565b60405180910390fd5b80606a819055507fd2a4f919593bfa0565c404bb5e42080750d07eedb9dfa9907c22be9e29c02a98606a54604051612e999190614171565b60405180910390a150565b606b5481565b612eb2612fe3565b73ffffffffffffffffffffffffffffffffffffffff16612ed0611d8e565b73ffffffffffffffffffffffffffffffffffffffff1614612f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1d90614071565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8d90613f51565b60405180910390fd5b612f9f81613436565b50565b6000612fbb60685460675461309890919063ffffffff16565b905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b61306c8363a9059cbb60e01b848460405160240161300a929190613ed0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135da565b505050565b6000818361307f9190614247565b905092915050565b600061309230612fc0565b15905090565b600081836130a69190614499565b905092915050565b60695443116130bc57613311565b6000606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016131199190613e7e565b60206040518083038186803b15801561313157600080fd5b505afa158015613145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131699190613a30565b90506000811415613181574360698190555050613311565b600061318f60695443613585565b905060006131c0606f6000600160ff1660ff168152602001908152602001600020548361331390919063ffffffff16565b905060006131f1606f6000600260ff1660ff168152602001908152602001600020548461331390919063ffffffff16565b905061325e6132358561322760706000600160ff1660ff168152602001908152602001600020548661331390919063ffffffff16565b61332990919063ffffffff16565b606e6000600160ff1660ff1681526020019081526020016000205461307190919063ffffffff16565b606e6000600160ff1660ff168152602001908152602001600020819055506132e76132be856132b060706000600260ff1660ff168152602001908152602001600020548561331390919063ffffffff16565b61332990919063ffffffff16565b606e6000600260ff1660ff1681526020019081526020016000205461307190919063ffffffff16565b606e6000600260ff1660ff1681526020019081526020016000208190555043606981905550505050505b565b60008183613321919061443f565b905092915050565b60008183613337919061429d565b905092915050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161337a9190613e7e565b60206040518083038186803b15801561339257600080fd5b505afa1580156133a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ca9190613a30565b905080821115613404576133ff83828673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b613430565b61342f83838673ffffffffffffffffffffffffffffffffffffffff16612feb9092919063ffffffff16565b5b50505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61357f846323b872dd60e01b85858560405160240161351d93929190613e99565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135da565b50505050565b600060675482116135aa576135a3838361309890919063ffffffff16565b90506135d4565b60675483106135bc57600090506135d4565b6135d18360675461309890919063ffffffff16565b90505b92915050565b600061363c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136a19092919063ffffffff16565b905060008151111561369c578080602001905181019061365c919061392c565b61369b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161369290614111565b60405180910390fd5b5b505050565b60606136b084846000856136b9565b90509392505050565b6060824710156136fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136f590613fd1565b60405180910390fd5b61370785612fc0565b613746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161373d906140d1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161376f9190613e67565b60006040518083038185875af1925050503d80600081146137ac576040519150601f19603f3d011682016040523d82523d6000602084013e6137b1565b606091505b50915091506137c18282866137cd565b92505050949350505050565b606083156137dd5782905061382d565b6000835111156137f05782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138249190613f2f565b60405180910390fd5b9392505050565b600081359050613843816149a4565b92915050565b600081519050613858816149bb565b92915050565b60008135905061386d816149d2565b92915050565b600081359050613882816149e9565b92915050565b600081519050613897816149e9565b92915050565b6000813590506138ac81614a00565b92915050565b6000815190506138c181614a00565b92915050565b6000602082840312156138d957600080fd5b60006138e784828501613834565b91505092915050565b6000806040838503121561390357600080fd5b600061391185828601613834565b925050602061392285828601613873565b9150509250929050565b60006020828403121561393e57600080fd5b600061394c84828501613849565b91505092915050565b600080600080600080600080610100898b03121561397257600080fd5b60006139808b828c0161385e565b98505060206139918b828c01613834565b97505060406139a28b828c01613834565b96505060606139b38b828c01613873565b95505060806139c48b828c01613873565b94505060a06139d58b828c01613873565b93505060c06139e68b828c01613873565b92505060e06139f78b828c01613834565b9150509295985092959890939650565b600060208284031215613a1957600080fd5b6000613a2784828501613873565b91505092915050565b600060208284031215613a4257600080fd5b6000613a5084828501613888565b91505092915050565b60008060408385031215613a6c57600080fd5b6000613a7a85828601613873565b9250506020613a8b85828601613873565b9150509250929050565b600060208284031215613aa757600080fd5b6000613ab58482850161389d565b91505092915050565b600060208284031215613ad057600080fd5b6000613ade848285016138b2565b91505092915050565b60008060408385031215613afa57600080fd5b6000613b088582860161389d565b9250506020613b1985828601613834565b9150509250929050565b60008060408385031215613b3657600080fd5b6000613b448582860161389d565b9250506020613b5585828601613873565b9150509250929050565b613b68816144cd565b82525050565b613b77816144df565b82525050565b6000613b8882614215565b613b92818561422b565b9350613ba2818560208601614558565b80840191505092915050565b613bb781614534565b82525050565b6000613bc882614220565b613bd28185614236565b9350613be2818560208601614558565b613beb816145e9565b840191505092915050565b6000613c03602683614236565b9150613c0e82614607565b604082019050919050565b6000613c26601c83614236565b9150613c3182614656565b602082019050919050565b6000613c49601083614236565b9150613c548261467f565b602082019050919050565b6000613c6c602e83614236565b9150613c77826146a8565b604082019050919050565b6000613c8f602683614236565b9150613c9a826146f7565b604082019050919050565b6000613cb2601983614236565b9150613cbd82614746565b602082019050919050565b6000613cd5601583614236565b9150613ce08261476f565b602082019050919050565b6000613cf8602e83614236565b9150613d0382614798565b604082019050919050565b6000613d1b603083614236565b9150613d26826147e7565b604082019050919050565b6000613d3e602083614236565b9150613d4982614836565b602082019050919050565b6000613d61601683614236565b9150613d6c8261485f565b602082019050919050565b6000613d84601b83614236565b9150613d8f82614888565b602082019050919050565b6000613da7601d83614236565b9150613db2826148b1565b602082019050919050565b6000613dca601683614236565b9150613dd5826148da565b602082019050919050565b6000613ded602a83614236565b9150613df882614903565b604082019050919050565b6000613e10601f83614236565b9150613e1b82614952565b602082019050919050565b6000613e33601683614236565b9150613e3e8261497b565b602082019050919050565b613e528161451d565b82525050565b613e6181614527565b82525050565b6000613e738284613b7d565b915081905092915050565b6000602082019050613e936000830184613b5f565b92915050565b6000606082019050613eae6000830186613b5f565b613ebb6020830185613b5f565b613ec86040830184613e49565b949350505050565b6000604082019050613ee56000830185613b5f565b613ef26020830184613e49565b9392505050565b6000602082019050613f0e6000830184613b6e565b92915050565b6000602082019050613f296000830184613bae565b92915050565b60006020820190508181036000830152613f498184613bbd565b905092915050565b60006020820190508181036000830152613f6a81613bf6565b9050919050565b60006020820190508181036000830152613f8a81613c19565b9050919050565b60006020820190508181036000830152613faa81613c3c565b9050919050565b60006020820190508181036000830152613fca81613c5f565b9050919050565b60006020820190508181036000830152613fea81613c82565b9050919050565b6000602082019050818103600083015261400a81613ca5565b9050919050565b6000602082019050818103600083015261402a81613cc8565b9050919050565b6000602082019050818103600083015261404a81613ceb565b9050919050565b6000602082019050818103600083015261406a81613d0e565b9050919050565b6000602082019050818103600083015261408a81613d31565b9050919050565b600060208201905081810360008301526140aa81613d54565b9050919050565b600060208201905081810360008301526140ca81613d77565b9050919050565b600060208201905081810360008301526140ea81613d9a565b9050919050565b6000602082019050818103600083015261410a81613dbd565b9050919050565b6000602082019050818103600083015261412a81613de0565b9050919050565b6000602082019050818103600083015261414a81613e03565b9050919050565b6000602082019050818103600083015261416a81613e26565b9050919050565b60006020820190506141866000830184613e49565b92915050565b60006040820190506141a16000830185613e49565b6141ae6020830184613e49565b9392505050565b60006080820190506141ca6000830187613e49565b6141d76020830186613e49565b6141e46040830185613e49565b6141f16060830184613e49565b95945050505050565b600060208201905061420f6000830184613e58565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006142528261451d565b915061425d8361451d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142925761429161458b565b5b828201905092915050565b60006142a88261451d565b91506142b38361451d565b9250826142c3576142c26145ba565b5b828204905092915050565b6000808291508390505b6001851115614318578086048111156142f4576142f361458b565b5b60018516156143035780820291505b8081029050614311856145fa565b94506142d8565b94509492505050565b600061432c8261451d565b91506143378361451d565b92506143647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461436c565b905092915050565b60008261437c5760019050614438565b8161438a5760009050614438565b81600181146143a057600281146143aa576143d9565b6001915050614438565b60ff8411156143bc576143bb61458b565b5b8360020a9150848211156143d3576143d261458b565b5b50614438565b5060208310610133831016604e8410600b841016171561440e5782820a9050838111156144095761440861458b565b5b614438565b61441b84848460016142ce565b925090508184048111156144325761443161458b565b5b81810290505b9392505050565b600061444a8261451d565b91506144558361451d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561448e5761448d61458b565b5b828202905092915050565b60006144a48261451d565b91506144af8361451d565b9250828210156144c2576144c161458b565b5b828203905092915050565b60006144d8826144fd565b9050919050565b60008115159050919050565b60006144f6826144cd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061453f82614546565b9050919050565b6000614551826144fd565b9050919050565b60005b8381101561457657808201518184015260208101905061455b565b83811115614585576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000600082015250565b7f506f6f6c20686173207374617274656400000000000000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160008201527f6e206e657720656e64426c6f636b000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000600082015250565b7f4572726f723a20496e76616c696420616d6f756e740000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4e6577207374617274426c6f636b206d7573742062652068696768657220746860008201527f616e2063757272656e7420626c6f636b00000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742062652072657761726420746f6b656e00000000000000000000600082015250565b7f416d6f756e7420746f20776974686472617720746f6f20686967680000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43616e6e6f74206265207374616b656420746f6b656e00000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f4d75737420626520696e666572696f7220746f20333000000000000000000000600082015250565b6149ad816144cd565b81146149b857600080fd5b50565b6149c4816144df565b81146149cf57600080fd5b50565b6149db816144eb565b81146149e657600080fd5b50565b6149f28161451d565b81146149fd57600080fd5b50565b614a0981614527565b8114614a1457600080fd5b5056fea2646970667358221220399a58ac4e9a940c06b20a1a5cf50ddd955da4e01f1c2bd190ca48a637bfc56864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 808,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1619,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 3505,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "isInitialized",
        "offset": 0,
        "slot": "102",
        "type": "t_bool"
      },
      {
        "astId": 3507,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "endBlock",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 3509,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "startBlock",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 3511,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 3513,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "lockUpDuration",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 3515,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 3517,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "feeAddress",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 3520,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "stakedToken",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IERC20Upgradeable)275"
      },
      {
        "astId": 3524,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfAccTokenPerShare",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3528,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfRewardPerBlock",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3532,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfPrecisionFactor",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3536,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfRewardTokenDecimals",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 3540,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfRewardTokens",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 3545,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "userInfo",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_struct(UserInfo)3554_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)275": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3554_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GQGalacticAlliance.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3554_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(UserInfo)3554_storage": {
        "encoding": "inplace",
        "label": "struct GQGalacticAlliance.UserInfo",
        "members": [
          {
            "astId": 3547,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3549,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "rewardDebt1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3551,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "rewardDebt2",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3553,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "firstDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}