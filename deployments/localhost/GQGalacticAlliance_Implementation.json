{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewEndBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "NewLockUpDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardTokenFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfAccTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfPrecisionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        }
      ],
      "name": "poolCalcRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "name": "poolSetStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetStartAndDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "poolStartIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        }
      ],
      "name": "rewarPerBlockUI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "setLockUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRemains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1fc7e410d41253fac0c9916576de95a97ede3f04de5e5d320b7910efc9e657e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4286617",
    "logsBloom": "0x
    "blockHash": "0x2004a605f624408396b3c7306fe47d79db8614a66161ff899b0aaa3c5ce158c3",
    "transactionHash": "0xa1fc7e410d41253fac0c9916576de95a97ede3f04de5e5d320b7910efc9e657e",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "4286617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4a843e41a0e0c8892f663cb894dd654b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"NewLockUpDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardTokenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfAccTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfPrecisionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"}],\"name\":\"poolCalcRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"poolSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetStartAndDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"poolStartIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"}],\"name\":\"rewarPerBlockUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"setLockUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRemains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GQGalacticAlliance.sol\":\"GQGalacticAlliance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/GQGalacticAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract GQGalacticAlliance is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuard\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint8 constant TOKEN1 = 1;\\n    uint8 constant TOKEN2 = 2;\\n\\n    // Is contract initialized\\n    bool public isInitialized;\\n\\n    // The block number when REWARD distribution ends.\\n    uint256 public endBlock;\\n\\n    // The block number when REWARD distribution starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastUpdateBlock;\\n\\n    // Lockup duration for deposit\\n    uint256 public lockUpDuration;\\n\\n    // Withdraw fee in BP\\n    uint256 public withdrawFee;\\n\\n    // Withdraw fee destiny address\\n    address public feeAddress;\\n\\n    // The staked token\\n    IERC20Upgradeable public stakedToken;\\n\\n    // Accrued token per share\\n    mapping(uint8 => uint256) public mapOfAccTokenPerShare;\\n\\n    // REWARD tokens created per block.\\n    mapping(uint8 => uint256) public mapOfRewardPerBlock;\\n\\n    // The precision factor for reward tokens\\n    mapping(uint8 => uint256) public mapOfPrecisionFactor;\\n\\n    // decimals places of the reward token\\n    mapping(uint8 => uint8) public mapOfRewardTokenDecimals;\\n\\n    // The reward token\\n    mapping(uint8 => address) public mapOfRewardTokens;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // Staked tokens the user has provided\\n        uint256 rewardDebt1; // Reward debt1\\n        uint256 rewardDebt2; // Reward debt2\\n        uint256 firstDeposit; // First deposit before withdraw\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewEndBlock(uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event RewardsStop(uint256 blockNumber);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event NewLockUpDuration(uint256 lockUpDuration);\\n\\n    constructor() initializer {}\\n\\n    /*\\n     * @notice Constructor of the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken1: reward token1 address\\n     * @param _rewardToken2: reward token2 address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _endBlock: end block\\n     * @param _lockUpDuration: duration for the deposit\\n     * @param _withdrawFee: fee for early withdraw\\n     * @param _feeAddress: address where fees for early withdraw will be send\\n     */\\n    function initialize(\\n        IERC20Upgradeable _stakedToken,\\n        address _rewardToken1,\\n        address _rewardToken2,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _lockUpDuration,\\n        uint256 _withdrawFee,\\n        address _feeAddress\\n    ) public initializer {\\n        __Ownable_init();\\n        stakedToken = _stakedToken;\\n        mapOfRewardTokens[TOKEN1] = _rewardToken1;\\n        mapOfRewardTokens[TOKEN2] = _rewardToken2;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        lockUpDuration = _lockUpDuration;\\n        withdrawFee = _withdrawFee;\\n        feeAddress = _feeAddress;\\n\\n        mapOfRewardTokenDecimals[TOKEN1] = IERC20MetadataUpgradeable(\\n            mapOfRewardTokens[TOKEN1]\\n        ).decimals();\\n        mapOfRewardTokenDecimals[TOKEN2] = IERC20MetadataUpgradeable(\\n            mapOfRewardTokens[TOKEN2]\\n        ).decimals();\\n        require(\\n            mapOfRewardTokenDecimals[TOKEN1] < 30 &&\\n                mapOfRewardTokenDecimals[TOKEN2] < 30,\\n            \\\"Must be inferior to 30\\\"\\n        );\\n\\n        mapOfPrecisionFactor[TOKEN1] = uint256(\\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN1])))\\n        );\\n        mapOfPrecisionFactor[TOKEN2] = uint256(\\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN2])))\\n        );\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        isInitialized = true;\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to deposit (in stakedToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingToken1 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN1])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt1);\\n            if (pendingToken1 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN1],\\n                    msg.sender,\\n                    pendingToken1\\n                );\\n            }\\n            uint256 pendingToken2 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN2])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt2);\\n\\n            if (pendingToken2 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN2],\\n                    msg.sender,\\n                    pendingToken2\\n                );\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakedToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.firstDeposit = user.firstDeposit == 0\\n                ? block.timestamp\\n                : user.firstDeposit;\\n        }\\n\\n        user.rewardDebt1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1]);\\n\\n        user.rewardDebt2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2]);\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"Error: Invalid amount\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n        _updatePool();\\n\\n        uint256 pendingToken1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1])\\n            .sub(user.rewardDebt1);\\n        uint256 pendingToken2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2])\\n            .sub(user.rewardDebt2);\\n\\n        user.amount = user.amount.sub(_amount);\\n        uint256 _amountToSend = _amount;\\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\\n                10000\\n            );\\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n            _amountToSend = _amountToSend - _feeAmountToSend;\\n        }\\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\\n        user.firstDeposit = user.firstDeposit == 0\\n            ? block.timestamp\\n            : user.firstDeposit;\\n\\n        if (pendingToken1 > 0) {\\n            _safeTokenTransfer(\\n                mapOfRewardTokens[TOKEN1],\\n                msg.sender,\\n                pendingToken1\\n            );\\n        }\\n        if (pendingToken2 > 0) {\\n            _safeTokenTransfer(\\n                mapOfRewardTokens[TOKEN2],\\n                msg.sender,\\n                pendingToken2\\n            );\\n        }\\n\\n        user.rewardDebt1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1]);\\n        user.rewardDebt2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2]);\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Claim reward tokens\\n     */\\n    function claim() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingToken1 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN1])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt1);\\n\\n            if (pendingToken1 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN1],\\n                    msg.sender,\\n                    pendingToken1\\n                );\\n                emit Claim(msg.sender, pendingToken1);\\n            }\\n            uint256 pendingToken2 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN2])\\n                .div(mapOfPrecisionFactor[TOKEN2])\\n                .sub(user.rewardDebt2);\\n\\n            if (pendingToken2 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN2],\\n                    msg.sender,\\n                    pendingToken2\\n                );\\n                emit Claim(msg.sender, pendingToken2);\\n            }\\n        }\\n\\n        user.rewardDebt1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1]);\\n\\n        user.rewardDebt2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2]);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt1 = 0;\\n        user.rewardDebt2 = 0;\\n\\n        // Avoid users send an amount with 0 tokens\\n        if (_amountToTransfer > 0) {\\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n                uint256 _feeAmountToSend = _amountToTransfer\\n                    .mul(withdrawFee)\\n                    .div(10000);\\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\\n            }\\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != mapOfRewardTokens[TOKEN1] &&\\n                _tokenAddress != mapOfRewardTokens[TOKEN2],\\n            \\\"Cannot be reward token\\\"\\n        );\\n\\n        IERC20Upgradeable(_tokenAddress).safeTransfer(\\n            address(msg.sender),\\n            _tokenAmount\\n        );\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint8 _rewardTokenId, uint256 _rewardPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        mapOfRewardPerBlock[_rewardTokenId] = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"New startBlock must be lower than new endBlock\\\"\\n        );\\n        require(\\n            block.number < _startBlock,\\n            \\\"New startBlock must be higher than current block\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        endBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice Sets the lock up duration\\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\\n     * @dev This function is only callable by owner.\\n     */\\n    function setLockUpDuration(uint256 _lockUpDuration) external onlyOwner {\\n        lockUpDuration = _lockUpDuration;\\n        emit NewLockUpDuration(lockUpDuration);\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool given a block amount\\n     * @param _blocks: block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolStartIn(uint256 _blocks) external onlyOwner {\\n        poolSetStart(block.number.add(_blocks));\\n    }\\n\\n    /*\\n     * @notice Set the duration and start block of the pool\\n     * @param _startBlock: start block\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStartAndDuration(\\n        uint256 _startBlock,\\n        uint256 _durationBlocks\\n    ) external onlyOwner {\\n        poolSetStart(_startBlock);\\n        poolSetDuration(_durationBlocks);\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function withdrawRemains(uint8 _rewardTokenId, address _to)\\n        external\\n        onlyOwner\\n    {\\n        require(block.number > endBlock, \\\"Error: Pool not finished yet\\\");\\n        uint256 tokenBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\\n            .balanceOf(address(this));\\n        require(tokenBal > 0, \\\"Error: No remaining funds\\\");\\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\\n            _to,\\n            tokenBal\\n        );\\n    }\\n\\n    /*\\n     * @notice Deposits the reward token1 funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function depositRewardTokenFunds(uint8 _rewardTokenId, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    /*\\n     * @notice Gets the reward per block for UI\\n     * @return reward per block\\n     */\\n    function rewarPerBlockUI(uint8 _rewardTokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            mapOfRewardPerBlock[_rewardTokenId].div(\\n                10**uint256(mapOfRewardTokenDecimals[_rewardTokenId])\\n            );\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(uint8 _rewardTokenId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 rewardDebt = _rewardTokenId == TOKEN1\\n            ? user.rewardDebt1\\n            : user.rewardDebt2;\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n            uint256 tokenReward = multiplier.mul(\\n                mapOfRewardPerBlock[_rewardTokenId]\\n            );\\n            uint256 adjustedPerShare = mapOfAccTokenPerShare[_rewardTokenId]\\n                .add(\\n                    tokenReward.mul(mapOfPrecisionFactor[_rewardTokenId]).div(\\n                        stakedTokenSupply\\n                    )\\n                );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedPerShare)\\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\\n                    .sub(rewardDebt);\\n        } else {\\n            return\\n                user\\n                    .amount\\n                    .mul(mapOfAccTokenPerShare[_rewardTokenId])\\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\\n                    .sub(rewardDebt);\\n        }\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool\\n     * @param _startBlock: start block\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        uint256 rewardDurationValue = rewardDuration();\\n        startBlock = _startBlock;\\n        endBlock = startBlock.add(rewardDurationValue);\\n        lastUpdateBlock = startBlock;\\n        emit NewStartAndEndBlocks(startBlock, endBlock);\\n    }\\n\\n    /*\\n     * @notice Set the duration of the pool\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        endBlock = startBlock.add(_durationBlocks);\\n        poolCalcRewardPerBlock(TOKEN1);\\n        poolCalcRewardPerBlock(TOKEN2);\\n        emit NewEndBlock(endBlock);\\n    }\\n\\n    /*\\n     * @notice Calculates the rewardPerBlock of the pool\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolCalcRewardPerBlock(uint8 _rewardTokenId) public onlyOwner {\\n        uint256 rewardBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).balanceOf(address(this));\\n        mapOfRewardPerBlock[_rewardTokenId] = rewardBal.div(rewardDuration());\\n    }\\n\\n    /*\\n     * @notice Gets the reward duration\\n     * @return reward duration\\n     */\\n    function rewardDuration() public view returns (uint256) {\\n        return endBlock.sub(startBlock);\\n    }\\n\\n    /*\\n     * @notice SendPending tokens to claimer\\n     * @param pending: amount to claim\\n     */\\n    function _safeTokenTransfer(\\n        address _rewardToken,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 rewardTokenBalance = IERC20Upgradeable(_rewardToken).balanceOf(address(this));\\n        if (_amount > rewardTokenBalance) {\\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, rewardTokenBalance);\\n        } else {\\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastUpdateBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastUpdateBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n        uint256 tokenReward1 = multiplier.mul(mapOfRewardPerBlock[TOKEN1]);\\n        uint256 tokenReward2 = multiplier.mul(mapOfRewardPerBlock[TOKEN2]);\\n        mapOfAccTokenPerShare[TOKEN1] = mapOfAccTokenPerShare[TOKEN1].add(\\n            tokenReward1.mul(mapOfPrecisionFactor[TOKEN1]).div(stakedTokenSupply)\\n        );\\n        mapOfAccTokenPerShare[TOKEN2] = mapOfAccTokenPerShare[TOKEN2].add(\\n            tokenReward2.mul(mapOfPrecisionFactor[TOKEN2]).div(stakedTokenSupply)\\n        );\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     * @return multiplier\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= endBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock.sub(_from);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78c6c883a382cadc7302ee5157243a08c5d9352fd914f85554a2d22b64ae0c72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c806380dc067211610130578063be615335116100b8578063db2e21bc1161007c578063db2e21bc14610629578063e1b2addc14610633578063e941fa781461064f578063f2fde38b1461066d578063f520e7e51461068957610227565b8063be61533514610573578063bfe5f541146105a3578063c9b5b29d146105bf578063cc7a262e146105ef578063d3a8615c1461060d57610227565b80639b4f9193116100ff5780639b4f9193146104d1578063a218141b146104ed578063af1664d11461050b578063b3f02d381461053b578063b6b55f251461055757610227565b806380dc06721461047157806383d1c65b1461047b5780638da5cb5b146104975780639513997f146104b557610227565b806341275358116101b35780635fed9b13116101825780635fed9b13146103cd57806363664dc7146103fd5780636aa662b51461042d578063715018a61461044b5780637bfaa40c1461045557610227565b8063412753581461035757806348cd4cb1146103755780634e71d92d14610393578063522b34011461039d57610227565b806327e644fe116101fa57806327e644fe146102b55780632bf033ad146102e55780632e1a7d4d14610301578063392e53cd1461031d5780633f138d4b1461033b57610227565b8063083c63231461022c5780630f7064eb1461024a57806310f8097b146102665780631959a00214610282575b600080fd5b6102346106a7565b60405161024191906142c9565b60405180910390f35b610264600480360381019061025f9190613c38565b6106ad565b005b610280600480360381019061027b9190613b1c565b610791565b005b61029c600480360381019061029791906139dc565b61082b565b6040516102ac949392919061430d565b60405180910390f35b6102cf60048036038101906102ca9190613baa565b61085b565b6040516102dc9190613fb6565b60405180910390f35b6102ff60048036038101906102fa9190613a6a565b61088e565b005b61031b60048036038101906103169190613b1c565b610e3d565b005b610325611369565b6040516103329190614031565b60405180910390f35b61035560048036038101906103509190613a05565b61137c565b005b61035f61160c565b60405161036c9190613fb6565b60405180910390f35b61037d611632565b60405161038a91906142c9565b60405180910390f35b61039b611638565b005b6103b760048036038101906103b29190613baa565b6119de565b6040516103c491906142c9565b60405180910390f35b6103e760048036038101906103e29190613baa565b6119f6565b6040516103f49190614352565b60405180910390f35b61041760048036038101906104129190613baa565b611a16565b60405161042491906142c9565b60405180910390f35b610435611a2e565b60405161044291906142c9565b60405180910390f35b610453611a34565b005b61046f600480360381019061046a9190613b1c565b611abc565b005b610479611be7565b005b61049560048036038101906104909190613baa565b611c6c565b005b61049f611de9565b6040516104ac9190613fb6565b60405180910390f35b6104cf60048036038101906104ca9190613b6e565b611e13565b005b6104eb60048036038101906104e69190613c38565b611fab565b005b6104f56120c4565b60405161050291906142c9565b60405180910390f35b61052560048036038101906105209190613baa565b6120ca565b60405161053291906142c9565b60405180910390f35b61055560048036038101906105509190613b1c565b6120e2565b005b610571600480360381019061056c9190613b1c565b61221a565b005b61058d60048036038101906105889190613bfc565b61260b565b60405161059a91906142c9565b60405180910390f35b6105bd60048036038101906105b89190613bfc565b6128be565b005b6105d960048036038101906105d49190613baa565b612af0565b6040516105e691906142c9565b60405180910390f35b6105f7612b5a565b604051610604919061404c565b60405180910390f35b61062760048036038101906106229190613b6e565b612b80565b005b610631612c12565b005b61064d60048036038101906106489190613b1c565b612e40565b005b610657612eff565b60405161066491906142c9565b60405180910390f35b610687600480360381019061068291906139dc565b612f05565b005b610691612ffd565b60405161069e91906142c9565b60405180910390f35b60675481565b6106b561303e565b73ffffffffffffffffffffffffffffffffffffffff166106d3611de9565b73ffffffffffffffffffffffffffffffffffffffff1614610729576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610720906141a9565b60405180910390fd5b61078d3082607260008660ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b5050565b61079961303e565b73ffffffffffffffffffffffffffffffffffffffff166107b7611de9565b73ffffffffffffffffffffffffffffffffffffffff161461080d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610804906141a9565b60405180910390fd5b61082861082382436130cc90919063ffffffff16565b6120e2565b50565b60736020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60726020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff166108b65760008054906101000a900460ff16156108bf565b6108be6130e2565b5b6108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590614169565b60405180910390fd5b60008060019054906101000a900460ff16159050801561094e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6109566130f3565b88606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508760726000600160ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660726000600260ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856068819055508460678190555083606a8190555082606b8190555081606c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2657600080fd5b505afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190613bd3565b60716000600160ff1660ff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1057600080fd5b505afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c489190613bd3565b60716000600260ff1660ff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601e60716000600160ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16108015610cde5750601e60716000600260ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16105b610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d14906142a9565b60405180910390fd5b610d5b60716000600160ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16601e61314c90919063ffffffff16565b600a610d679190614479565b60706000600160ff1660ff16815260200190815260200160002081905550610dc360716000600260ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16601e61314c90919063ffffffff16565b600a610dcf9190614479565b60706000600260ff1660ff168152602001908152602001600020819055506068546069819055506001606660006101000a81548160ff0219169083151502179055508015610e325760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b60026065541415610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a90614289565b60405180910390fd5b600260658190555060008111610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590614149565b60405180910390fd5b6000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600001541015610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f906141e9565b60405180910390fd5b610f60613162565b6000610fd58260010154610fc760706000600160ff1660ff16815260200190815260200160002054610fb9606e6000600160ff1660ff1681526020019081526020016000205487600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b9050600061104c836002015461103e60706000600260ff1660ff16815260200190815260200160002054611030606e6000600260ff1660ff1681526020019081526020016000205488600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b905061106584846000015461314c90919063ffffffff16565b83600001819055506000849050606a548460030154611084919061439f565b4210156111375760006110b66127106110a8606b54856133c790919063ffffffff16565b6133dd90919063ffffffff16565b9050611127606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b808261113391906145f1565b9150505b6111843382606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b600084600301541461119a57836003015461119c565b425b846003018190555060008311156111f3576111f260726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633856133f3565b5b60008211156112425761124160726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846133f3565b5b61129f60706000600160ff1660ff16815260200190815260200160002054611291606e6000600160ff1660ff1681526020019081526020016000205487600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b846001018190555061130460706000600260ff1660ff168152602001908152602001600020546112f6606e6000600260ff1660ff1681526020019081526020016000205487600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b84600201819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648660405161135291906142c9565b60405180910390a250505050600160658190555050565b606660009054906101000a900460ff1681565b61138461303e565b73ffffffffffffffffffffffffffffffffffffffff166113a2611de9565b73ffffffffffffffffffffffffffffffffffffffff16146113f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ef906141a9565b60405180910390fd5b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090614229565b60405180910390fd5b60726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611565575060726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b906141c9565b60405180910390fd5b6115cf33828473ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b7f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051611600929190614008565b60405180910390a15050565b606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60685481565b6002606554141561167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590614289565b60405180910390fd5b60026065819055506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506116d1613162565b600081600001541115611909576000611753826001015461174560706000600160ff1660ff16815260200190815260200160002054611737606e6000600160ff1660ff1681526020019081526020016000205487600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b905060008111156117f2576117a360726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633836133f3565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516117e991906142c9565b60405180910390a25b6000611867836002015461185960706000600260ff1660ff1681526020019081526020016000205461184b606e6000600260ff1660ff1681526020019081526020016000205488600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b90506000811115611906576118b760726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633836133f3565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516118fd91906142c9565b60405180910390a25b50505b61196660706000600160ff1660ff16815260200190815260200160002054611958606e6000600160ff1660ff1681526020019081526020016000205484600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b81600101819055506119cb60706000600260ff1660ff168152602001908152602001600020546119bd606e6000600260ff1660ff1681526020019081526020016000205484600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b8160020181905550506001606581905550565b606f6020528060005260406000206000915090505481565b60716020528060005260406000206000915054906101000a900460ff1681565b606e6020528060005260406000206000915090505481565b606a5481565b611a3c61303e565b73ffffffffffffffffffffffffffffffffffffffff16611a5a611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa7906141a9565b60405180910390fd5b611aba60006134ea565b565b611ac461303e565b73ffffffffffffffffffffffffffffffffffffffff16611ae2611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2f906141a9565b60405180910390fd5b6068544310611b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b73906140c9565b60405180910390fd5b611b91816068546130cc90919063ffffffff16565b606781905550611ba16001611c6c565b611bab6002611c6c565b7f55baa248360bce74a89304071ca6e882f61d2226c15dde53a4ec1e05af523d92606754604051611bdc91906142c9565b60405180910390a150565b611bef61303e565b73ffffffffffffffffffffffffffffffffffffffff16611c0d611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a906141a9565b60405180910390fd5b43606781905550565b611c7461303e565b73ffffffffffffffffffffffffffffffffffffffff16611c92611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdf906141a9565b60405180910390fd5b6000607260008360ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d5c9190613fb6565b60206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190613b45565b9050611dc8611db9612ffd565b826133dd90919063ffffffff16565b606f60008460ff1660ff168152602001908152602001600020819055505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611e1b61303e565b73ffffffffffffffffffffffffffffffffffffffff16611e39611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611e8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e86906141a9565b60405180910390fd5b6068544310611ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eca906140c9565b60405180910390fd5b808210611f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0c906140e9565b60405180910390fd5b814310611f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4e90614189565b60405180910390fd5b81606881905550806067819055506068546069819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce068282604051611f9f9291906142e4565b60405180910390a15050565b611fb361303e565b73ffffffffffffffffffffffffffffffffffffffff16611fd1611de9565b73ffffffffffffffffffffffffffffffffffffffff1614612027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201e906141a9565b60405180910390fd5b606854431061206b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612062906140c9565b60405180910390fd5b80606f60008460ff1660ff168152602001908152602001600020819055507f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df816040516120b891906142c9565b60405180910390a15050565b60695481565b60706020528060005260406000206000915090505481565b6120ea61303e565b73ffffffffffffffffffffffffffffffffffffffff16612108611de9565b73ffffffffffffffffffffffffffffffffffffffff161461215e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612155906141a9565b60405180910390fd5b60685443106121a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612199906140c9565b60405180910390fd5b60006121ac612ffd565b9050816068819055506121ca816068546130cc90919063ffffffff16565b6067819055506068546069819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0660685460675460405161220e9291906142e4565b60405180910390a15050565b60026065541415612260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225790614289565b60405180910390fd5b60026065819055506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506122b3613162565b60008160000154111561244f576000612335826001015461232760706000600160ff1660ff16815260200190815260200160002054612319606e6000600160ff1660ff1681526020019081526020016000205487600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b905060008111156123865761238560726000600160ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633836133f3565b5b60006123fb83600201546123ed60706000600160ff1660ff168152602001908152602001600020546123df606e6000600260ff1660ff1681526020019081526020016000205488600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b9050600081111561244c5761244b60726000600260ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633836133f3565b5b50505b60008211156124e75761246f8282600001546130cc90919063ffffffff16565b81600001819055506124c6333084606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166135b0909392919063ffffffff16565b60008160030154146124dc5780600301546124de565b425b81600301819055505b61254460706000600160ff1660ff16815260200190815260200160002054612536606e6000600160ff1660ff1681526020019081526020016000205484600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b81600101819055506125a960706000600260ff1660ff1681526020019081526020016000205461259b606e6000600260ff1660ff1681526020019081526020016000205484600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b81600201819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516125f791906142c9565b60405180910390a250600160658190555050565b600080607360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160ff168560ff161461266957816002015461266f565b81600101545b90506000606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016126ce9190613fb6565b60206040518083038186803b1580156126e657600080fd5b505afa1580156126fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271e9190613b45565b905060695443118015612732575060008114155b1561284557600061274560695443613639565b90506000612775606f60008a60ff1660ff16815260200190815260200160002054836133c790919063ffffffff16565b905060006127e26127ba856127ac607060008e60ff1660ff16815260200190815260200160002054866133c790919063ffffffff16565b6133dd90919063ffffffff16565b606e60008c60ff1660ff168152602001908152602001600020546130cc90919063ffffffff16565b90506128388561282a607060008d60ff1660ff1681526020019081526020016000205461281c858b600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b96505050505050506128b8565b6128b2826128a4607060008a60ff1660ff16815260200190815260200160002054612896606e60008c60ff1660ff1681526020019081526020016000205488600001546133c790919063ffffffff16565b6133dd90919063ffffffff16565b61314c90919063ffffffff16565b93505050505b92915050565b6128c661303e565b73ffffffffffffffffffffffffffffffffffffffff166128e4611de9565b73ffffffffffffffffffffffffffffffffffffffff161461293a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612931906141a9565b60405180910390fd5b606754431161297e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612975906140a9565b60405180910390fd5b6000607260008460ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129f29190613fb6565b60206040518083038186803b158015612a0a57600080fd5b505afa158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a429190613b45565b905060008111612a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7e90614129565b60405180910390fd5b612aeb8282607260008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b505050565b6000612b53607160008460ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16600a612b2b9190614479565b606f60008560ff1660ff168152602001908152602001600020546133dd90919063ffffffff16565b9050919050565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612b8861303e565b73ffffffffffffffffffffffffffffffffffffffff16612ba6611de9565b73ffffffffffffffffffffffffffffffffffffffff1614612bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf3906141a9565b60405180910390fd5b612c05826120e2565b612c0e81611abc565b5050565b60026065541415612c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4f90614289565b60405180910390fd5b60026065819055506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015490506000826000018190555060008260010181905550600082600201819055506000811115612de657606a548260030154612ce5919061439f565b421015612d98576000612d17612710612d09606b54856133c790919063ffffffff16565b6133dd90919063ffffffff16565b9050612d88606c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b8082612d9491906145f1565b9150505b612de53382606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b5b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051612e2c91906142c9565b60405180910390a250506001606581905550565b612e4861303e565b73ffffffffffffffffffffffffffffffffffffffff16612e66611de9565b73ffffffffffffffffffffffffffffffffffffffff1614612ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb3906141a9565b60405180910390fd5b80606a819055507fd2a4f919593bfa0565c404bb5e42080750d07eedb9dfa9907c22be9e29c02a98606a54604051612ef491906142c9565b60405180910390a150565b606b5481565b612f0d61303e565b73ffffffffffffffffffffffffffffffffffffffff16612f2b611de9565b73ffffffffffffffffffffffffffffffffffffffff1614612f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f78906141a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe890614089565b60405180910390fd5b612ffa816134ea565b50565b600061301660685460675461314c90919063ffffffff16565b905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6130c78363a9059cbb60e01b8484604051602401613065929190614008565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061368e565b505050565b600081836130da919061439f565b905092915050565b60006130ed3061301b565b15905090565b600060019054906101000a900460ff16613142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161313990614249565b60405180910390fd5b61314a613755565b565b6000818361315a91906145f1565b905092915050565b6069544311613170576133c5565b6000606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016131cd9190613fb6565b60206040518083038186803b1580156131e557600080fd5b505afa1580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321d9190613b45565b905060008114156132355743606981905550506133c5565b600061324360695443613639565b90506000613274606f6000600160ff1660ff16815260200190815260200160002054836133c790919063ffffffff16565b905060006132a5606f6000600260ff1660ff16815260200190815260200160002054846133c790919063ffffffff16565b90506133126132e9856132db60706000600160ff1660ff16815260200190815260200160002054866133c790919063ffffffff16565b6133dd90919063ffffffff16565b606e6000600160ff1660ff168152602001908152602001600020546130cc90919063ffffffff16565b606e6000600160ff1660ff1681526020019081526020016000208190555061339b6133728561336460706000600260ff1660ff16815260200190815260200160002054856133c790919063ffffffff16565b6133dd90919063ffffffff16565b606e6000600260ff1660ff168152602001908152602001600020546130cc90919063ffffffff16565b606e6000600260ff1660ff1681526020019081526020016000208190555043606981905550505050505b565b600081836133d59190614597565b905092915050565b600081836133eb91906143f5565b905092915050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161342e9190613fb6565b60206040518083038186803b15801561344657600080fd5b505afa15801561345a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347e9190613b45565b9050808211156134b8576134b383828673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b6134e4565b6134e383838673ffffffffffffffffffffffffffffffffffffffff166130469092919063ffffffff16565b5b50505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613633846323b872dd60e01b8585856040516024016135d193929190613fd1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061368e565b50505050565b6000606754821161365e57613657838361314c90919063ffffffff16565b9050613688565b60675483106136705760009050613688565b6136858360675461314c90919063ffffffff16565b90505b92915050565b60006136f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166137b69092919063ffffffff16565b905060008151111561375057808060200190518101906137109190613a41565b61374f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374690614269565b60405180910390fd5b5b505050565b600060019054906101000a900460ff166137a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161379b90614249565b60405180910390fd5b6137b46137af61303e565b6134ea565b565b60606137c584846000856137ce565b90509392505050565b606082471015613813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161380a90614109565b60405180910390fd5b61381c8561301b565b61385b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161385290614209565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516138849190613f9f565b60006040518083038185875af1925050503d80600081146138c1576040519150601f19603f3d011682016040523d82523d6000602084013e6138c6565b606091505b50915091506138d68282866138e2565b92505050949350505050565b606083156138f257829050613942565b6000835111156139055782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139399190614067565b60405180910390fd5b9392505050565b60008135905061395881614b4b565b92915050565b60008151905061396d81614b62565b92915050565b60008135905061398281614b79565b92915050565b60008135905061399781614b90565b92915050565b6000815190506139ac81614b90565b92915050565b6000813590506139c181614ba7565b92915050565b6000815190506139d681614ba7565b92915050565b6000602082840312156139ee57600080fd5b60006139fc84828501613949565b91505092915050565b60008060408385031215613a1857600080fd5b6000613a2685828601613949565b9250506020613a3785828601613988565b9150509250929050565b600060208284031215613a5357600080fd5b6000613a618482850161395e565b91505092915050565b600080600080600080600080610100898b031215613a8757600080fd5b6000613a958b828c01613973565b9850506020613aa68b828c01613949565b9750506040613ab78b828c01613949565b9650506060613ac88b828c01613988565b9550506080613ad98b828c01613988565b94505060a0613aea8b828c01613988565b93505060c0613afb8b828c01613988565b92505060e0613b0c8b828c01613949565b9150509295985092959890939650565b600060208284031215613b2e57600080fd5b6000613b3c84828501613988565b91505092915050565b600060208284031215613b5757600080fd5b6000613b658482850161399d565b91505092915050565b60008060408385031215613b8157600080fd5b6000613b8f85828601613988565b9250506020613ba085828601613988565b9150509250929050565b600060208284031215613bbc57600080fd5b6000613bca848285016139b2565b91505092915050565b600060208284031215613be557600080fd5b6000613bf3848285016139c7565b91505092915050565b60008060408385031215613c0f57600080fd5b6000613c1d858286016139b2565b9250506020613c2e85828601613949565b9150509250929050565b60008060408385031215613c4b57600080fd5b6000613c59858286016139b2565b9250506020613c6a85828601613988565b9150509250929050565b613c7d81614625565b82525050565b613c8c81614637565b82525050565b6000613c9d8261436d565b613ca78185614383565b9350613cb78185602086016146b0565b80840191505092915050565b613ccc8161468c565b82525050565b6000613cdd82614378565b613ce7818561438e565b9350613cf78185602086016146b0565b613d0081614741565b840191505092915050565b6000613d1860268361438e565b9150613d238261475f565b604082019050919050565b6000613d3b601c8361438e565b9150613d46826147ae565b602082019050919050565b6000613d5e60108361438e565b9150613d69826147d7565b602082019050919050565b6000613d81602e8361438e565b9150613d8c82614800565b604082019050919050565b6000613da460268361438e565b9150613daf8261484f565b604082019050919050565b6000613dc760198361438e565b9150613dd28261489e565b602082019050919050565b6000613dea60158361438e565b9150613df5826148c7565b602082019050919050565b6000613e0d602e8361438e565b9150613e18826148f0565b604082019050919050565b6000613e3060308361438e565b9150613e3b8261493f565b604082019050919050565b6000613e5360208361438e565b9150613e5e8261498e565b602082019050919050565b6000613e7660168361438e565b9150613e81826149b7565b602082019050919050565b6000613e99601b8361438e565b9150613ea4826149e0565b602082019050919050565b6000613ebc601d8361438e565b9150613ec782614a09565b602082019050919050565b6000613edf60168361438e565b9150613eea82614a32565b602082019050919050565b6000613f02602b8361438e565b9150613f0d82614a5b565b604082019050919050565b6000613f25602a8361438e565b9150613f3082614aaa565b604082019050919050565b6000613f48601f8361438e565b9150613f5382614af9565b602082019050919050565b6000613f6b60168361438e565b9150613f7682614b22565b602082019050919050565b613f8a81614675565b82525050565b613f998161467f565b82525050565b6000613fab8284613c92565b915081905092915050565b6000602082019050613fcb6000830184613c74565b92915050565b6000606082019050613fe66000830186613c74565b613ff36020830185613c74565b6140006040830184613f81565b949350505050565b600060408201905061401d6000830185613c74565b61402a6020830184613f81565b9392505050565b60006020820190506140466000830184613c83565b92915050565b60006020820190506140616000830184613cc3565b92915050565b600060208201905081810360008301526140818184613cd2565b905092915050565b600060208201905081810360008301526140a281613d0b565b9050919050565b600060208201905081810360008301526140c281613d2e565b9050919050565b600060208201905081810360008301526140e281613d51565b9050919050565b6000602082019050818103600083015261410281613d74565b9050919050565b6000602082019050818103600083015261412281613d97565b9050919050565b6000602082019050818103600083015261414281613dba565b9050919050565b6000602082019050818103600083015261416281613ddd565b9050919050565b6000602082019050818103600083015261418281613e00565b9050919050565b600060208201905081810360008301526141a281613e23565b9050919050565b600060208201905081810360008301526141c281613e46565b9050919050565b600060208201905081810360008301526141e281613e69565b9050919050565b6000602082019050818103600083015261420281613e8c565b9050919050565b6000602082019050818103600083015261422281613eaf565b9050919050565b6000602082019050818103600083015261424281613ed2565b9050919050565b6000602082019050818103600083015261426281613ef5565b9050919050565b6000602082019050818103600083015261428281613f18565b9050919050565b600060208201905081810360008301526142a281613f3b565b9050919050565b600060208201905081810360008301526142c281613f5e565b9050919050565b60006020820190506142de6000830184613f81565b92915050565b60006040820190506142f96000830185613f81565b6143066020830184613f81565b9392505050565b60006080820190506143226000830187613f81565b61432f6020830186613f81565b61433c6040830185613f81565b6143496060830184613f81565b95945050505050565b60006020820190506143676000830184613f90565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006143aa82614675565b91506143b583614675565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143ea576143e96146e3565b5b828201905092915050565b600061440082614675565b915061440b83614675565b92508261441b5761441a614712565b5b828204905092915050565b6000808291508390505b60018511156144705780860481111561444c5761444b6146e3565b5b600185161561445b5780820291505b808102905061446985614752565b9450614430565b94509492505050565b600061448482614675565b915061448f83614675565b92506144bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846144c4565b905092915050565b6000826144d45760019050614590565b816144e25760009050614590565b81600181146144f8576002811461450257614531565b6001915050614590565b60ff841115614514576145136146e3565b5b8360020a91508482111561452b5761452a6146e3565b5b50614590565b5060208310610133831016604e8410600b84101617156145665782820a905083811115614561576145606146e3565b5b614590565b6145738484846001614426565b9250905081840481111561458a576145896146e3565b5b81810290505b9392505050565b60006145a282614675565b91506145ad83614675565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156145e6576145e56146e3565b5b828202905092915050565b60006145fc82614675565b915061460783614675565b92508282101561461a576146196146e3565b5b828203905092915050565b600061463082614655565b9050919050565b60008115159050919050565b600061464e82614625565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006146978261469e565b9050919050565b60006146a982614655565b9050919050565b60005b838110156146ce5780820151818401526020810190506146b3565b838111156146dd576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000600082015250565b7f506f6f6c20686173207374617274656400000000000000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160008201527f6e206e657720656e64426c6f636b000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000600082015250565b7f4572726f723a20496e76616c696420616d6f756e740000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4e6577207374617274426c6f636b206d7573742062652068696768657220746860008201527f616e2063757272656e7420626c6f636b00000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742062652072657761726420746f6b656e00000000000000000000600082015250565b7f416d6f756e7420746f20776974686472617720746f6f20686967680000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43616e6e6f74206265207374616b656420746f6b656e00000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f4d75737420626520696e666572696f7220746f20333000000000000000000000600082015250565b614b5481614625565b8114614b5f57600080fd5b50565b614b6b81614637565b8114614b7657600080fd5b50565b614b8281614643565b8114614b8d57600080fd5b50565b614b9981614675565b8114614ba457600080fd5b50565b614bb08161467f565b8114614bbb57600080fd5b5056fea2646970667358221220b17206b345cd5a36a31153489e6e9f85886a1fb6316c508e35f0be5f6a85856564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 808,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1619,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 3505,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "isInitialized",
        "offset": 0,
        "slot": "102",
        "type": "t_bool"
      },
      {
        "astId": 3507,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "endBlock",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 3509,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "startBlock",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 3511,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 3513,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "lockUpDuration",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 3515,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 3517,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "feeAddress",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 3520,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "stakedToken",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IERC20Upgradeable)275"
      },
      {
        "astId": 3524,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfAccTokenPerShare",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3528,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfRewardPerBlock",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3532,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfPrecisionFactor",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3536,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfRewardTokenDecimals",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 3540,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "mapOfRewardTokens",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 3545,
        "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
        "label": "userInfo",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_struct(UserInfo)3554_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)275": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3554_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GQGalacticAlliance.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3554_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(UserInfo)3554_storage": {
        "encoding": "inplace",
        "label": "struct GQGalacticAlliance.UserInfo",
        "members": [
          {
            "astId": 3547,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3549,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "rewardDebt1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3551,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "rewardDebt2",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3553,
            "contract": "contracts/GQGalacticAlliance.sol:GQGalacticAlliance",
            "label": "firstDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}